--1 - Crear una tabla (create table - sp_tables - sp_columns - drop table)
--PRIMER PROBLEMA

-- Elimine la tabla "agenda" si existe
 IF OBJECT_ID('AGENDA') IS NOT NULL
  DROP TABLE AGENDA;

-- Creacion de la tabla con el nombre /agenda
  CREATE TABLE / AGENDA(
  APELLIDO VARCHAR(30),
  NOMBRE VARCHAR(20),
  DOMICILIO VARCHAR(30),
  TELEFONO VARCHAR(11)
 );
--Creacion de la tabla con el nombre agenda 
CREATE TABLE AGENDA(
  APELLIDO VARCHAR(30),
  NOMBRE VARCHAR(20),
  DOMICILIO VARCHAR(30),
  TELEFONO VARCHAR(11)
 );
--Creacion de la tabla agenda nueva vez
 CREATE TABLE AGENDA(
  APELLIDO VARCHAR(30),
  NOMBRE VARCHAR(20),
  DOMICILIO VARCHAR(30),
  TELEFONO VARCHAR(11)
 );
 --Ver la tabla
 EXEC SP_TABLES @TABLE_OWNER = 'DB0';
 --Ver la columna
 EXEC SP_COLUMNS AGENDA;
 --Eliminar la tabla
 DROP TABLE AGENDA;

 ---SEGUNDO PROBLEMA

--Elimina la tabla libros si existe
 IF OBJECT_ID('LIBROS') IS NOT NULL
  DROP TABLE LIBROS;
--Ver la tabla  @TABLE_OWNER='DBO'
 EXEC SP_TABLES @TABLE_OWNER='DBO';
--Creacion de la tabla libros
 CREATE TABLE LIBROS(
  TITULO VARCHAR(20),
  AUTOR VARCHAR(30),
  EDITORIAL VARCHAR(15)
 );
 --Creacion de la tabla libro nueva vez
 CREATE TABLE LIBROS(
  TITULO VARCHAR(20),
  AUTOR VARCHAR(30),
  EDITORIAL VARCHAR(15)
 );
 --Ver la tabla @TABLE_OWNER='DBO'
 EXEC SP_TABLES @TABLE_OWNER='DBO';
 --Ve la columna SP_COLUMNS LIBROS
 EXEC SP_COLUMNS LIBROS;
 --Eliminar la tabla libros
 DROP TABLE LIBROS;
 --Eliminar la tabla libros nueva vez
 DROP TABLE LIBROS;


-- 3 - Insertar y recuperar registros de una tabla (insert into - select)
-- PRIMER PROBLEMA
 --Eliminar la tabla si existe
IF OBJECT_ID('AGENDA') IS NOT NULL
  DROP TABLE AGENDA;
--Creacion de la tabla agenda
 CREATE TABLE AGENDA(
  APELLIDO VARCHAR(30),
  NOMBRE VARCHAR(20),
  DOMICILIO VARCHAR(30),
  TELEFONO VARCHAR(11)
 );
 --Ver la tabla  @TABLE_OWNER='DBO'
 EXEC SP_TABLES @TABLE_OWNER='DBO';
 --Ver la tabla SP_COLUMNS AGENDA
 EXEC SP_COLUMNS AGENDA;
 --Insectar datos a la tabla
 INSERT INTO AGENDA (APELLIDO, NOMBRE, DOMICILIO, TELEFONO)
  VALUES ('WALDER','REYES','LIBERTD','1234567891');
 INSERT INTO AGENDA (APELLIDO,NOMBRE, DOMICILIO, TELEFONO)
  VALUES ('MARIA','PEREZ','LOSRIELES','1234567891');
--Consultar los datos de la tabla agenda
 SELECT * FROM AGENDA;
 --Elimina la tabla agenda
 DROP TABLE AGENDA;
 --Eliminar la tabla agenda nueva vez
 DROP TABLE AGENDA;


--SEGUNDO PROBLEMA
--Elimina la tabla libros si existe
IF OBJECT_ID('LIBROS') IS NOT NULL
  DROP TABLE LIBROS;
--Creacion de la tabla libros
 CREATE TABLE LIBROS (
  TITULO VARCHAR(20),
  AUTOR VARCHAR(30),
  EDITORIAL VARCHAR(15)
 );
 --Ver la tabla DBO
 EXEC SP_TABLES @TABLE_OWNER='DBO';
 --Ver la tabla Libro
 EXEC SP_COLUMNS LIBROS;
 --Insertar datos en la tabla
 INSERT INTO LIBROS (TITULO,AUTOR,EDITORIAL)
  VALUES ('EL ALEPH','BORGES','PLANETA');
 INSERT INTO LIBROS (TITULO,AUTOR,EDITORIAL) 
  VALUES ('MARTIN FIERRO','JOSE HERNANDEZ','EMECE');
 INSERT INTO LIBROS (TITULO,AUTOR,EDITORIAL)
  VALUES ('APRENDA PHP','MARIO MOLINA','EMECE');
--Consultar los datos de la tabla libros
 SELECT * FROM LIBROS;

--4 - Tipos de datos básicos

--PRIMER PROBLEMA

--Eliminar la pelicula si existe
IF OBJECT_ID('PELICULAS')IS NOT NULL
  DROP TABLE PELICULAS;
 --Creacion de la tabla peliculas
 CREATE TABLE PELICULAS(
  NOMBRE VARCHAR(20),
  ACTOR VARCHAR(20),
  DURACION INTEGER,
  CANTIDAD INTEGER
 );
 --Ve la columna peliculas
 EXEC SP_COLUMNS PELICULAS;
 --Insertar en la tabla peliculas
 INSERT INTO PELICULAS (NOMBRE, ACTOR, DURACION, CANTIDAD)
  VALUES ('MISION IMPOSIBLE','TOM CRUISE',128,3);
 INSERT INTO PELICULAS (NOMBRE, ACTOR, DURACION, CANTIDAD)
  VALUES ('MISION IMPOSIBLE 2','TOM CRUISE',130,2);
 INSERT INTO PELICULAS (NOMBRE, ACTOR, DURACION, CANTIDAD)
  VALUES ('MUJER BONITA','JULIA ROBERTS',118,3);
 INSERT INTO PELICULAS (NOMBRE, ACTOR, DURACION, CANTIDAD)
  VALUES ('ELSA Y FRED','CHINA ZORRILLA',110,2);
  --Consultar en la tabla peliculas
 SELECT * FROM PELICULAS;

--SEGUNDO PROBLEMA

--Eliminar la tabla empleado si existe
 IF OBJECT_ID('EMPLEADOS') IS NOT NULL
  DROP TABLE EMPLEADOS;
--Creacion de la tabla empleados
 CREATE TABLE EMPLEADOS(
  NOMBRE VARCHAR(20),
  DOCUMENTO VARCHAR(8),
  SEXO VARCHAR(1),
  DOMICILIO VARCHAR(30),
  SUELDOBASICO FLOAT(2,1)
 );
-- ver la columna empleados
 EXEC SP_COLUMNS EMPLEADOS;
 
 --Insertar en la tabla empleados
 INSERT INTO EMPLEADOS (NOMBRE, DOCUMENTO, SEXO, DOMICILIO, SUELDOBASICO)
  VALUES ('JUAN PEREZ','22333444','M','SARMIENTO 123',500);
 INSERT INTO EMPLEADOS (NOMBRE, DOCUMENTO, SEXO, DOMICILIO, SUELDOBASICO)
  VALUES ('ANA ACOSTA','24555666','F','COLON 134',650);
 INSERT INTO EMPLEADOS (NOMBRE, DOCUMENTO, SEXO, DOMICILIO, SUELDOBASICO)
  VALUES ('BARTOLOME BARRIOS','27888999','M','URQUIZA 479',800);
--Consultar los datos de la tabla empleados
 SELECT * FROM EMPLEADOS;


--5 - Recuperar algunos campos (select)

--PRIMER PROBLEMA
--Elimina la tabla empleado si existe
 IF OBJECT_ID('EMPLEADOS') IS NOT NULL
  DROP TABLE EMPLEADOS;
  --Crear la tabla empleados
 CREATE TABLE EMPLEADOS(
  NOMBRE VARCHAR(20),
  DOCUMENTO VARCHAR(8), 
  SEXO VARCHAR(1),
  DOMICILIO VARCHAR(30),
  SUELDOBASICO FLOAT
 );
 --ver la columna empleado
 EXEC SP_COLUMNS EMPLEADOS;
 --Insertar datos en la tabla empleados
 INSERT INTO EMPLEADOS (NOMBRE, DOCUMENTO, SEXO, DOMICILIO, SUELDOBASICO)
  VALUES ('JUAN JUAREZ','22333444','M','SARMIENTO 123',500);
 INSERT INTO EMPLEADOS (NOMBRE, DOCUMENTO, SEXO, DOMICILIO, SUELDOBASICO)
  VALUES ('ANA ACOSTA','27888999','F','COLON 134',700);
 INSERT INTO EMPLEADOS (NOMBRE, DOCUMENTO, SEXO, DOMICILIO, SUELDOBASICO)
  VALUES ('CARLOS CASERES','31222333','M','URQUIZA 479',850);
--Consultar los datos empleados
 SELECT * FROM EMPLEADOS;
 --Consultar los campos nombre, documento, domicilio de la tabla empleados
 SELECT NOMBRE,DOCUMENTO,DOMICILIO FROM EMPLEADOS;
 --Consultar los campos documento sexo sueldobasico de la tabla empleados
 SELECT DOCUMENTO,SEXO,SUELDOBASICO FROM EMPLEADOS;

--SEGUNDO PROBLEMA
--Eliminar la tabla empleados si existe
 IF OBJECT_ID('EMPLEADOS') IS NOT NULL
  DROP TABLE EMPLEADOS;
--Creacion de la tabla empleados
 CREATE TABLE EMPLEADOS(
  NOMBRE VARCHAR(20),
  DOCUMENTO VARCHAR(8), 
  SEXO VARCHAR(1),
  DOMICILIO VARCHAR(30),
  SUELDOBASICO FLOAT
 );
 --ve la columna empleados
 EXEC SP_COLUMNS EMPLEADOS;
 --Insertar datos en la tabla empleados
 INSERT INTO EMPLEADOS (NOMBRE, DOCUMENTO, SEXO, DOMICILIO, SUELDOBASICO)
  VALUES ('JUAN JUAREZ','22333444','M','SARMIENTO 123',500);
 INSERT INTO EMPLEADOS (NOMBRE, DOCUMENTO, SEXO, DOMICILIO, SUELDOBASICO)
  VALUES ('ANA ACOSTA','27888999','F','COLON 134',700);
 INSERT INTO EMPLEADOS (NOMBRE, DOCUMENTO, SEXO, DOMICILIO, SUELDOBASICO)
  VALUES ('CARLOS CASERES','31222333','M','URQUIZA 479',850);
  --Consultar en la tabla empleados
 SELECT * FROM EMPLEADOS;
 --Consultar el nombre documento domicilio de la tabla empleados
 SELECT NOMBRE,DOCUMENTO,DOMICILIO FROM EMPLEADOS;
 --Consultar documento sexo suieldo basico de la tabla empleados
 SELECT DOCUMENTO,SEXO,SUELDOBASICO FROM EMPLEADOS;

 --6 - Recuperar algunos registros (where)

 --PRIMER PROBLEMA

--Elimina la tabla agenda si existe
IF OBJECT_ID('AGENDA') IS NOT NULL
  DROP TABLE AGENDA;
--Crear la tabla agenda
 CREATE TABLE AGENDA (
  APELLIDO VARCHAR(30),
  NOMBRE VARCHAR(20),
  DOMICILIO VARCHAR(30),
  TELEFONO VARCHAR(11)
 );
--Ver la comuna agenda
 EXEC SP_COLUMNS AGENDA;
--Insertar datos en la tabla agenda
 INSERT INTO AGENDA(APELLIDO,NOMBRE,DOMICILIO,TELEFONO) VALUES
  ('ACOSTA', 'ANA', 'COLON 123', '4234567');

 INSERT INTO AGENDA(APELLIDO,NOMBRE,DOMICILIO,TELEFONO) VALUES
  ('BUSTAMANTE', 'BETINA', 'AVELLANEDA 135', '4458787');

 INSERT INTO AGENDA(APELLIDO,NOMBRE,DOMICILIO,TELEFONO) VALUES
  ('LOPEZ', 'HECTOR', 'SALTA 545', '4887788'); 
 INSERT INTO AGENDA(APELLIDO,NOMBRE,DOMICILIO,TELEFONO) VALUES
  ('LOPEZ', 'LUIS', 'URQUIZA 333', '4545454');
 INSERT INTO AGENDA(APELLIDO,NOMBRE,DOMICILIO,TELEFONO) VALUES
  ('LOPEZ', 'MARISA', 'URQUIZA 333', '4545454');
--Consultar la tabla agenda
 SELECT * FROM AGENDA;
--Consultar la tabla agenda
 SELECT * FROM AGENDA
  WHERE NOMBRE='MARISA';
--Consultar los campos nombre domicilio de la tabla agenda
 SELECT NOMBRE,DOMICILIO FROM AGENDA
  WHERE APELLIDO='LOPEZ';
--Consultar los campos nombre tabla agenda
 SELECT NOMBRE FROM AGENDA
  WHERE TELEFONO='4545454';

--SEGUNDO PROBLEMA
--Si existe elimina la tabla libros
IF OBJECT_ID('LIBROS') IS NOT NULL
  DROP TABLE LIBROS;
--Creacion d ela tabla libros
 CREATE TABLE LIBROS (
  TITULO VARCHAR(20),
  AUTOR VARCHAR(30),
  EDITORIAL VARCHAR(15)
 );
 --Ver la comuna libros
 EXEC SP_COLUMNS LIBROS;
 --Insertar en la tabla libros
 INSERT INTO LIBROS(TITULO,AUTOR,EDITORIAL) VALUES
  ('EL ALEPH','BORGES','EMECE');
 INSERT INTO LIBROS(TITULO,AUTOR,EDITORIAL) VALUES
  ('MARTIN FIERRO','JOSE HERNANDEZ','EMECE');
 INSERT INTO LIBROS(TITULO,AUTOR,EDITORIAL) VALUES
  ('MARTIN FIERRO','JOSE HERNANDEZ','PLANETA');
 INSERT INTO LIBROS(TITULO,AUTOR,EDITORIAL) VALUES
  ('APRENDA PHP','MARIO MOLINA','SIGLO XXI');

 SELECT * FROM LIBROS
  WHERE AUTOR='BORGES';
  --Consular el campo titulo de la tabal libro donde editoria es editoria es igual a emece
 SELECT TITULO FROM LIBROS
  WHERE EDITORIAL='EMECE';
    --Consular el campo titulo de la tabal libro donde editoria es editoria es igual a martin fierro
 SELECT EDITORIAL FROM LIBROS
  WHERE TITULO='MARTIN FIERRO';

--- 7 - Operadores relacionales
--PRIMER PROBLEMA
--Si existe elimina la tabla articulo
IF OBJECT_ID('ARTICULOS') IS NOT NULL
  DROP TABLE ARTICULOS;
--Creacion de la tabla articulo
 CREATE TABLE ARTICULOS(
  CODIGO INTEGER,
  NOMBRE VARCHAR(20),
  DESCRIPCION VARCHAR(30),
  PRECIO FLOAT,
  CANTIDAD INTEGER
 );
--Ver la columna articulos
 EXEC SP_COLUMNS ARTICULOS;
 --Insertar datos en la tabla
 INSERT INTO ARTICULOS (CODIGO, NOMBRE, DESCRIPCION, PRECIO,CANTIDAD)
  VALUES (1,'IMPRESORA','EPSON STYLUS C45',400.80,20);
 INSERT INTO ARTICULOS (CODIGO, NOMBRE, DESCRIPCION, PRECIO,CANTIDAD)
  VALUES (2,'IMPRESORA','EPSON STYLUS C85',500,30);
 INSERT INTO ARTICULOS (CODIGO, NOMBRE, DESCRIPCION, PRECIO,CANTIDAD)
  VALUES (3,'MONITOR','SAMSUNG 14',800,10);
 INSERT INTO ARTICULOS (CODIGO, NOMBRE, DESCRIPCION, PRECIO,CANTIDAD)
  VALUES (4,'TECLADO','INGLES BISWAL',100,50);
 INSERT INTO ARTICULOS (CODIGO, NOMBRE, DESCRIPCION, PRECIO,CANTIDAD)
  VALUES (5,'TECLADO','ESPAÑOL BISWAL',90,50);
--Consultar los datos de la tabla artículos donde nombre es igual impresora
 SELECT * FROM ARTICULOS
  WHERE NOMBRE='IMPRESORA';
--Consultar los datos de la tabla artículos donde precio es mazyos o igual 400
 SELECT * FROM ARTICULOS
  WHERE PRECIO>=400;
--Consultar el código nombre de la tabla articu donde la cantidad es menor que 30
 SELECT CODIGO,NOMBRE
  FROM ARTICULOS
  WHERE CANTIDAD<30;
--Consutar el nombre la descripción de los artículos diferentes de 100
 SELECT NOMBRE, DESCRIPCION
  FROM ARTICULOS
  WHERE PRECIO<>100;

--SEGUNDO PROBLEMA
--Elimina la tabla películas si existe
IF OBJECT_ID('PELICULAS') IS NOT NULL
  DROP TABLE PELICULAS;
--Creacion de la tabla Peliculas
 CREATE TABLE PELICULAS(
  TITULO VARCHAR(20),
  ACTOR VARCHAR(20),
  DURACION INTEGER,
  CANTIDAD INTEGER
 );
--Insertar en la tabla peliculas
 INSERT INTO PELICULAS (TITULO, ACTOR, DURACION, CANTIDAD)
  VALUES ('MISION IMPOSIBLE','TOM CRUISE',120,3);
 INSERT INTO PELICULAS (TITULO, ACTOR, DURACION, CANTIDAD)
  VALUES ('MISION IMPOSIBLE 2','TOM CRUISE',180,4);
 INSERT INTO PELICULAS (TITULO, ACTOR, DURACION, CANTIDAD)
  VALUES ('MUJER BONITA','JULIA R.',90,1);
 INSERT INTO PELICULAS (TITULO, ACTOR, DURACION, CANTIDAD)
  VALUES ('ELSA Y FRED','CHINA ZORRILLA',80,2);
--Consultar los datos de la tabla pelicualas donde la duración es menor o igual a 90
 SELECT * FROM PELICULAS
  WHERE DURACION<=90;
--Consultar los datos de la tabla pelicualas donde el actor en diferente de Tom cruise
 SELECT * FROM PELICULAS
  WHERE ACTOR<>'TOM CRUISE';
  --Consultar el titulo actor cantidad de la tabla pelicula donde la cantida ese mayor que 2
 SELECT TITULO,ACTOR,CANTIDAD
  FROM PELICULAS
  WHERE CANTIDAD >2;

  
 --8 - Borrar registros (delete)

 --PRIMER PROBLEMA

 --Si existe la tabla agenda se elimina
IF OBJECT_ID('AGENDA') IS NOT NULL
  DROP TABLE AGENDA;
--Creacion de la tabla agenda
 CREATE TABLE AGENDA(
  APELLIDO VARCHAR(30),
  NOMBRE VARCHAR(20),
  DOMICILIO VARCHAR(30),
  TELEFONO VARCHAR(11)
 );
 --Insertar datos en la tabla
 INSERT INTO AGENDA (APELLIDO,NOMBRE,DOMICILIO,TELEFONO)
   VALUES('ALVAREZ','ALBERTO','COLON 123','4234567');
 INSERT INTO AGENDA (APELLIDO,NOMBRE,DOMICILIO,TELEFONO)
   VALUES('JUAREZ','JUAN','AVELLANEDA 135','4458787');
 INSERT INTO AGENDA (APELLIDO,NOMBRE,DOMICILIO,TELEFONO)
   VALUES('LOPEZ','MARIA','URQUIZA 333','4545454');
 INSERT INTO AGENDA (APELLIDO,NOMBRE,DOMICILIO,TELEFONO)
   VALUES('LOPEZ','JOSE','URQUIZA 333','4545454');
 INSERT INTO AGENDA (APELLIDO,NOMBRE,DOMICILIO,TELEFONO)
   VALUES('SALAS','SUSANA','GRAL. PAZ 1234','4123456');
--Eliminar los datos de la tabla agenda cuando el nombre es igua a juan
 DELETE FROM AGENDA
 WHERE NOMBRE='JUAN';
 --Eliminar los datos de la tabla agenda cuando el telefono en igual 4545454
 DELETE FROM AGENDA
 WHERE TELEFONO='4545454';
 --Consultar los datos de la tabla agenda
 SELECT * FROM AGENDA;
 --Elimina los datos de la tabla agenda
 DELETE FROM AGENDA;
 --Consulta los datos de la tabla agenda
 SELECT * FROM AGENDA;

--SEGUNDO PARCIAL
--Si la tabla articuclo existe se elimina la tabla
IF OBJECT_ID('ARTICULOS') IS NOT NULL
  DROP TABLE ARTICULOS;
  --Creacion de la tabla articulos
 CREATE TABLE ARTICULOS(
  CODIGO INTEGER,
  NOMBRE VARCHAR(20),
  DESCRIPCION VARCHAR(30),
  PRECIO FLOAT,
  CANTIDAD INTEGER
 );
 --Ver la tabla articulos
 EXEC SP_COLUMNS ARTICULOS;
 --Insertar los datos en la tabla
 INSERT INTO ARTICULOS (CODIGO, NOMBRE, DESCRIPCION, PRECIO,CANTIDAD)
  VALUES (1,'IMPRESORA','EPSON STYLUS C45',400.80,20);
 INSERT INTO ARTICULOS (CODIGO, NOMBRE, DESCRIPCION, PRECIO,CANTIDAD)
  VALUES (2,'IMPRESORA','EPSON STYLUS C85',500,30);
 INSERT INTO ARTICULOS (CODIGO, NOMBRE, DESCRIPCION, PRECIO,CANTIDAD)
  VALUES (3,'MONITOR','SAMSUNG 14',800,10);
 INSERT INTO ARTICULOS (CODIGO, NOMBRE, DESCRIPCION, PRECIO,CANTIDAD)
  VALUES (4,'TECLADO','INGLES BISWAL',100,50);
 INSERT INTO ARTICULOS (CODIGO, NOMBRE, DESCRIPCION, PRECIO,CANTIDAD)
  VALUES (5,'TECLADO','ESPAÑOL BISWAL',90,50);

 DELETE FROM ARTICULOS
  WHERE PRECIO>=500;
--Consultar los datos de la tabla articulos
 SELECT * FROM ARTICULOS;
 --Eliminar los datos de la tabla articulos donde el nombre es ingual a impresora
 DELETE FROM ARTICULOS
  WHERE NOMBRE='IMPRESORA';
--Consultar los datos de la tabla articulos
 SELECT * FROM ARTICULOS;


--9 - Actualizar registros (update)

--PRIMER PROBLEMA
 
 --Si existe se elimina la tabla agenda
 IF OBJECT_ID('AGENDA') IS NOT NULL
  DROP TABLE AGENDA;
--Creacion de la tabla agenda
 CREATE TABLE AGENDA(
  APELLIDO VARCHAR(30),
  NOMBRE VARCHAR(20),
  DOMICILIO VARCHAR(30),
  TELEFONO VARCHAR(11)
 );
 --Insertar datos en la tabla agenda
 INSERT INTO AGENDA (APELLIDO,NOMBRE,DOMICILIO,TELEFONO)
  VALUES ('ACOSTA','ALBERTO','COLON 123','4234567');
 INSERT INTO AGENDA (APELLIDO,NOMBRE,DOMICILIO,TELEFONO)
  VALUES ('JUAREZ','JUAN','AVELLANEDA 135','4458787');
 INSERT INTO AGENDA (APELLIDO,NOMBRE,DOMICILIO,TELEFONO)
  VALUES ('LOPEZ','MARIA','URQUIZA 333','4545454');
 INSERT INTO AGENDA (APELLIDO,NOMBRE,DOMICILIO,TELEFONO)
  VALUES ('LOPEZ','JOSE','URQUIZA 333','4545454');
 INSERT INTO AGENDA (APELLIDO,NOMBRE,DOMICILIO,TELEFONO)
  VALUES ('SUAREZ','SUSANA','GRAL. PAZ 1234','4123456');
--Consultar los datos de la tabla agenda
 SELECT * FROM AGENDA;
 --Actializar la tabla agenda
 UPDATE AGENDA SET NOMBRE='JUAN JOSE'
  WHERE NOMBRE='JUAN';
--Consultar los datos de la tabla agenda
 SELECT * FROM AGENDA;
 --Actulizar la tabla agenda
 UPDATE AGENDA SET TELEFONO='4445566'
  WHERE TELEFONO='4545454';
--Consultar los datos de la tabla agenda
 SELECT * FROM AGENDA;
 ---Actualizar el nombre de la tabla agenda 
 UPDATE AGENDA SET NOMBRE='JUAN JOSE'
  WHERE NOMBRE='JUAN';
--Consultar los datos de la tabla agenda
 SELECT * FROM AGENDA;

 --SEGUNDO PROBLEMA
 --Eliminar la tabla libros si existe
 IF OBJECT_ID('LIBROS') IS NOT NULL
  DROP TABLE LIBROS;
--Creacion de la tabla libros
 CREATE TABLE LIBROS (
  TITULO VARCHAR(30),
  AUTOR VARCHAR(20),
  EDITORIAL VARCHAR(15),
  PRECIO FLOAT
 );
 --Insertar los datos en la tabla libros
 INSERT INTO LIBROS (TITULO, AUTOR, EDITORIAL, PRECIO)
  VALUES ('EL ALEPH','BORGES','EMECE',25.00);
 INSERT INTO LIBROS (TITULO, AUTOR, EDITORIAL, PRECIO)
  VALUES ('MARTIN FIERRO','JOSE HERNANDEZ','PLANETA',35.50);
 INSERT INTO LIBROS (TITULO, AUTOR, EDITORIAL, PRECIO)
  VALUES ('APRENDA PHP','MARIO MOLINA','EMECE',45.50);
 INSERT INTO LIBROS (TITULO, AUTOR, EDITORIAL, PRECIO)
  VALUES ('CERVANTES Y EL QUIJOTE','BORGES','EMECE',25);
 INSERT INTO LIBROS (TITULO, AUTOR, EDITORIAL, PRECIO)
  VALUES ('MATEMATICA ESTAS AHI','PAENZA','SIGLO XXI',15);
--Consultar los datos de la tabla libros
 SELECT * FROM LIBROS;
 --Actualizar el autor de la tabla libros
 UPDATE LIBROS SET AUTOR='ADRIAN PAENZA'
  WHERE AUTOR='PAENZA';
 --Consultar los datos de la tabla libros
 SELECT * FROM LIBROS;
 --Actualizar el autor de la tabla libros
 UPDATE LIBROS SET AUTOR='ADRIAN PAENZA'
  WHERE AUTOR='PAENZA';
  --Consultar los datos de la tabla libros
 SELECT * FROM LIBROS;
 --Actualizar los precios de la tabla libros donde 
 UPDATE LIBROS SET PRECIO=27
 WHERE AUTOR='MARIO MOLINA';
 --Consultar los datos de la tabla libros
 SELECT * FROM LIBROS;
 --Actulizar el campo editorial de la tabla libros
 UPDATE LIBROS SET EDITORIAL='EMECE S.A.'
  WHERE EDITORIAL='EMECE';
--Consultar los datos de la tabla libros
 SELECT * FROM LIBROS;
 --Eliminar los datos de la tabla articulos donde el codigo es diferente de 4
 DELETE FROM ARTICULOS
  WHERE CODIGO<>4;
--Consultar los datos de la tabla articulos
 SELECT * FROM ARTICULOS;


 --11 - Valores null (is null)

 --PRIMER PROBLEMA

 --Si la tabla medicamento existe se borrara
  IF OBJECT_ID('MEDICAMENTOS') IS NOT NULL
   DROP TABLE MEDICAMENTOS;
--Creacion de la tabla medicamento
 CREATE TABLE MEDICAMENTOS(
  CODIGO INTEGER NOT NULL,
  NOMBRE VARCHAR(20) NOT NULL,
  LABORATORIO VARCHAR(20),
  PRECIO FLOAT,
  CANTIDAD INTEGER NOT NULL
 );
 --Ver la columna medicamento
 EXEC SP_COLUMNS MEDICAMENTOS;
 --Insertar datos en la tabal medicamento
 INSERT INTO MEDICAMENTOS (CODIGO,NOMBRE,LABORATORIO,PRECIO,CANTIDAD)
  VALUES(1,'SERTAL GOTAS',NULL,NULL,100); 
 INSERT INTO MEDICAMENTOS (CODIGO,NOMBRE,LABORATORIO,PRECIO,CANTIDAD)
  VALUES(2,'SERTAL COMPUESTO',NULL,8.90,150);
 INSERT INTO MEDICAMENTOS (CODIGO,NOMBRE,LABORATORIO,PRECIO,CANTIDAD)
  VALUES(3,'BUSCAPINA','ROCHE',NULL,200);
--Consultar los datos de la tabla medicamento
 SELECT * FROM MEDICAMENTOS;
  --Insertar datos en la tabal medicamento
 INSERT INTO MEDICAMENTOS (CODIGO,NOMBRE, LABORATORIO,PRECIO,CANTIDAD)
  VALUES(4,'BAYASPIRINA','',0,150);
 --Insertar datos en la tabal medicamento
 INSERT INTO MEDICAMENTOS (CODIGO,NOMBRE,LABORATORIO,PRECIO,CANTIDAD)
  VALUES(0,'','BAYER',15.60,0);
--Consultar los datos de la tabla medicamento
 SELECT * FROM MEDICAMENTOS;
 --Insertar los datos de la tabla medicamento
 INSERT INTO MEDICAMENTOS (CODIGO,NOMBRE,LABORATORIO,PRECIO,CANTIDAD)
  VALUES(NULL,'AMOXIDAL JARABE','BAYER',25,120);
--Consultar los datos de la tabla medicamento donde el laboratorio en nulo
 SELECT * FROM MEDICAMENTOS
  WHERE LABORATORIO IS NULL;
--Consultar los datos de la tabla medicamento donde el laboratorio esta vacio
 SELECT * FROM MEDICAMENTOS
  WHERE LABORATORIO='';
--Consultar los datos de la tabla medicamento donde el precio en nulo
 SELECT * FROM MEDICAMENTOS
  WHERE PRECIO IS NULL;
--Consultar los datos de la tabla medicamento donde el precio es igual a 0
 SELECT * FROM MEDICAMENTOS
  WHERE PRECIO=0;
--Consultar los datos de la tabla medicamento donde el laboratorio es diferente de vacio
 SELECT * FROM MEDICAMENTOS
  WHERE LABORATORIO<>'';
--Consultar los datos de la tabla medicamento donde el laboratorio no estan en nulo
 SELECT * FROM MEDICAMENTOS
  WHERE LABORATORIO IS NOT NULL;
--Consultar los datos de la tabla medicamento donde el precios son diferentes de 0
 SELECT * FROM MEDICAMENTOS
  WHERE PRECIO<>0;
--Consultar los datos de la tabla medicamento donde el precio no es nulo
 SELECT * FROM MEDICAMENTOS
  WHERE PRECIO IS NOT NULL;


--SEGUNDO PROBLEMA
--Si la tabla pelicula existe sera eliminada
 IF OBJECT_ID('PELICULAS') IS NOT NULL
  DROP TABLE PELICULAS;
--Creacion de la tabla peliculas
 CREATE TABLE PELICULAS(
  CODIGO INT NOT NULL,
  TITULO VARCHAR(40) NOT NULL,
  ACTOR VARCHAR(20),
  DURACION INT
 );
 --Ver la columna peliculas
 EXEC SP_COLUMNS PELICULAS;
 --Insertar datos en la tabla peliculas
 INSERT INTO PELICULAS (CODIGO,TITULO,ACTOR,DURACION)
  VALUES(1,'MISION IMPOSIBLE','TOM CRUISE',120);
 INSERT INTO PELICULAS (CODIGO,TITULO,ACTOR,DURACION)
  VALUES(2,'HARRY POTTER Y LA PIEDRA FILOSOFAL',NULL,180);
 INSERT INTO PELICULAS (CODIGO,TITULO,ACTOR,DURACION)
  VALUES(3,'HARRY POTTER Y LA CAMARA SECRETA','DANIEL R.',NULL);
 INSERT INTO PELICULAS (CODIGO,TITULO,ACTOR,DURACION)
  VALUES(0,'MISION IMPOSIBLE 2','',150);
 INSERT INTO PELICULAS (CODIGO,TITULO,ACTOR,DURACION)
  VALUES(4,'','L. DI CAPRIO',220);
 INSERT INTO PELICULAS (CODIGO,TITULO,ACTOR,DURACION)
  VALUES(5,'MUJER BONITA','R. GERE-J. ROBERTS',0);
--Consultar los datos de la tabla peliculas
 SELECT * FROM PELICULAS;
  --Insertar datos en la tabla peliculas
 INSERT INTO PELICULAS (CODIGO,TITULO,ACTOR,DURACION)
  VALUES(NULL,'MUJER BONITA','R. GERE-J. ROBERTS',190);
--Consulatar los datos de la tabla pelicula donde el actor es diferente de null
 SELECT * FROM PELICULAS
  WHERE ACTOR IS NULL;
--Actulizar el campo duracion de la tabla pelicula donde la diracion es null
 UPDATE PELICULAS SET DURACION=120 WHERE DURACION IS NULL;
 --Actulizar el campo duracion de la tabla pelicula donde la cator es igual esta esta vacio
 UPDATE PELICULAS SET ACTOR='DESCONOCIDO'
  WHERE ACTOR='';
--Consultar los dato de la tabla peliculas
 SELECT * FROM PELICULAS;
--Eliminar los datos de la tabla pelicualas dendo titulo es igual a espacio
 DELETE FROM PELICULAS
  WHERE TITULO='';
----Consulta de los datos de la tabla peliculas
 SELECT * FROM PELICULAS;

 --12 - Clave primaria

 --Primer problema

 --Si la tabla libros existe sera eliminada
 IF OBJECT_ID('LIBROS') IS NOT NULL
  DROP TABLE LIBROS;
--Creacion de la tabla libros
 CREATE TABLE LIBROS(
  CODIGO INT NOT NULL,
  TITULO VARCHAR(40) NOT NULL,
  AUTOR VARCHAR(20),
  EDITORIAL VARCHAR(15),
  PRIMARY KEY(CODIGO)
 );
 --Insertar datos en la tabla libros
 INSERT INTO LIBROS (CODIGO,TITULO,AUTOR,EDITORIAL)
  VALUES (1,'EL ALEPH','BORGES','EMECE');
 INSERT INTO LIBROS (CODIGO,TITULO,AUTOR,EDITORIAL)
  VALUES (2,'MARTIN FIERRO','JOSE HERNANDEZ','PLANETA');
 INSERT INTO LIBROS (CODIGO,TITULO,AUTOR,EDITORIAL)
  VALUES (3,'APRENDA PHP','MARIO MOLINA','NUEVO SIGLO');
  --Insertar
 INSERT INTO LIBROS (CODIGO,TITULO,AUTOR,EDITORIAL)
  VALUES (2,'ALICIA EN EL PAIS DE LAS MARAVILLAS','LEWIS CARROLL','PLANETA');
  --Inserta en la tabla
 INSERT INTO LIBROS (CODIGO,TITULO,AUTOR,EDITORIAL)
  VALUES (NULL,'ALICIA EN EL PAIS DE LAS MARAVILLAS','LEWIS CARROLL','PLANETA');
--Actualizar el campo libro de la tabla libros
 UPDATE LIBROS SET CODIGO=1
  WHERE TITULO='MARTIN FIERRO';

--Segundo problema
--Si la tabla alumnos existe sera eliminada
 IF OBJECT_ID('ALUMNOS') IS NOT NULL
  DROP TABLE ALUMNOS;
--Crecion de la tabla alumnos 
 CREATE TABLE ALUMNOS(
  LEGAJO VARCHAR(4) NOT NULL,
  DOCUMENTO VARCHAR(8),
  NOMBRE VARCHAR(30),
  DOMICILIO VARCHAR(30),
  PRIMARY KEY(DOCUMENTO),
  PRIMARY KEY(LEGAJO)
 );
 --Creacion de la tabla alumnos nueva vez
 CREATE TABLE ALUMNOS(
  LEGAJO VARCHAR(4) NOT NULL,
  DOCUMENTO VARCHAR(8),
  NOMBRE VARCHAR(30),
  DOMICILIO VARCHAR(30),
  PRIMARY KEY(DOCUMENTO)
 );
--Ver la columna alumnos
 EXEC SP_COLUMNS ALUMNOS;
 --Insertar datos a la tabla alumnos
 INSERT INTO ALUMNOS (LEGAJO,DOCUMENTO,NOMBRE,DOMICILIO)
  VALUES('A233','22345345','PEREZ MARIANA','COLON 234');
 INSERT INTO ALUMNOS (LEGAJO,DOCUMENTO,NOMBRE,DOMICILIO)
  VALUES('A567','23545345','MORALES MARCOS','AVELLANEDA 348');

 INSERT INTO ALUMNOS (LEGAJO,DOCUMENTO,NOMBRE,DOMICILIO)
  VALUES('A642','23545345','GONZALEZ ANALIA','CASEROS 444');

 INSERT INTO ALUMNOS (LEGAJO,DOCUMENTO,NOMBRE,DOMICILIO)
  VALUES('A685',NULL,'MIRANDA CARMEN','USPALLATA 999');

 --13 - Campo con atributo Identity

 --Primer problema

 --Si la tabla medicamentom existe se borrara
  IF OBJECT_ID('MEDICAMENTOS') IS NOT NULL
  DROP TABLE MEDICAMENTOS;
--Crecion de la tabla medicamento
 CREATE TABLE MEDICAMENTOS(
  CODIGO INT IDENTITY,
  NOMBRE VARCHAR(20) NOT NULL,
  LABORATORIO VARCHAR(20),
  PRECIO FLOAT,
  CANTIDAD INTEGER
 );
 --Ver la columna medicamentos
 EXEC SP_COLUMNS MEDICAMENTOS;
 --Insertar datos en la tabla medicamento
 INSERT INTO MEDICAMENTOS (NOMBRE, LABORATORIO,PRECIO,CANTIDAD)
   VALUES('SERTAL','ROCHE',5.2,100);
 INSERT INTO MEDICAMENTOS (NOMBRE, LABORATORIO,PRECIO,CANTIDAD)
  VALUES('BUSCAPINA','ROCHE',4.10,200);
 INSERT INTO MEDICAMENTOS (NOMBRE, LABORATORIO,PRECIO,CANTIDAD)
  VALUES('AMOXIDAL 500','BAYER',15.60,100);
  --Consultar los datos de la tabla medicamento
 SELECT * FROM MEDICAMENTOS;
 --Insertar datos en la tabla medicamento
 INSERT INTO MEDICAMENTOS (CODIGO,NOMBRE, LABORATORIO,PRECIO,CANTIDAD)
  VALUES(4,'AMOXILINA 500','BAYER',15.60,100);
--Actualizar el campo codigo de la tabla medicamentos
 UPDATE MEDICAMENTOS SET CODIGO=5
  WHERE NOMBRE='BAYASPIRINA';
--Eliminar los datos de la tabla medicamento cunado el codigo es igua a 3
 DELETE FROM MEDICAMENTOS
  WHERE CODIGO=3;
--Insertar datos en la tabla medicmanto
 INSERT INTO MEDICAMENTOS (NOMBRE, LABORATORIO,PRECIO,CANTIDAD)
  VALUES('AMOXILINA 500','BAYER',15.60,100);
--Consultar los datos de la tabla medicamento
 SELECT * FROM MEDICAMENTOS;

 --SEGUNDO PROBLEMA
--Si la tabla peliculas existe sera eliminada
 IF OBJECT_ID('PELICULAS') IS NOT NULL
  DROP TABLE PELICULAS;
--Creacion de la tabla productos
 CREATE TABLE PELICULAS(
  CODIGO INT IDENTITY,
  TITULO VARCHAR(40),
  ACTOR VARCHAR(20),
  DURACION INT,
  PRIMARY KEY(CODIGO)
 );
 --Ver la comuna peliculas
 EXEC SP_COLUMNS PELICULAS;
 --Insertar valores en la tabla peliculas
 INSERT INTO PELICULAS (TITULO,ACTOR,DURACION)
  VALUES('MISION IMPOSIBLE','TOM CRUISE',120);
 INSERT INTO PELICULAS (TITULO,ACTOR,DURACION)
  VALUES('HARRY POTTER Y LA PIEDRA FILOSOFAL','DANIEL R.',180);
 INSERT INTO PELICULAS (TITULO,ACTOR,DURACION)
  VALUES('HARRY POTTER Y LA CAMARA SECRETA','DANIEL R.',190);
 INSERT INTO PELICULAS (TITULO,ACTOR,DURACION)
  VALUES('MISION IMPOSIBLE 2','TOM CRUISE',120);
 INSERT INTO PELICULAS (TITULO,ACTOR,DURACION)
  VALUES('LA VIDA ES BELLA','ZZZ',220);
  --Consultar los datos de la peliculas
 SELECT * FROM PELICULAS;
--Actualizar el codigo de la tabla de peliculas
 UPDATE PELICULAS SET CODIGO=7
  WHERE CODIGO=4;
--Eliminar los datos de la tabla peliculas
 DELETE FROM PELICULAS
  WHERE TITULO='LA VIDA ES BELLA';
--Insertar datos en la tabla de peliculas
 INSERT INTO PELICULAS (TITULO,ACTOR,DURACION)
  VALUES('ELSA Y FRED','CHINA ZORRILLA',90);
  --Consultar los datos de la tabla peliculas
 SELECT * FROM PELICULAS;

 --14 - Otras caracteristicas del atributo identity

 --PRIMER PROBLEMA

 --Si existe la tabla sera eliminada
 IF OBJECT_ID('MEDICAMENTOS') IS NOT NULL
  DROP TABLE MEDICAMENTOS;
--Crecion de la tabla medicamento
 CREATE TABLE MEDICAMENTOS(
  CODIGO INTEGER IDENTITY(10,1),
  NOMBRE VARCHAR(20) NOT NULL,
  LABORATORIO VARCHAR(20),
  PRECIO FLOAT,
  CANTIDAD INTEGER
 );
 --Insertar datos en la tabla medicamento
 INSERT INTO MEDICAMENTOS (NOMBRE, LABORATORIO,PRECIO,CANTIDAD)
   VALUES('SERTAL','ROCHE',5.2,100);
 INSERT INTO MEDICAMENTOS (NOMBRE, LABORATORIO,PRECIO,CANTIDAD)
  VALUES('BUSCAPINA','ROCHE',4.10,200);
 INSERT INTO MEDICAMENTOS (NOMBRE, LABORATORIO,PRECIO,CANTIDAD)
  VALUES('AMOXIDAL 500','BAYER',15.60,100);
--Consultar los datos de la tabla medicamento
 SELECT * FROM MEDICAMENTOS;
 --Insertar datos en la tabla medicamento
 INSERT INTO MEDICAMENTOS (CODIGO,NOMBRE, LABORATORIO,PRECIO,CANTIDAD)
  VALUES(4,'AMOXILINA 500','BAYER',15.60,100);
  --seter la opcion IDENTITY_INSERT
  SET IDENTITY_INSERT MEDICAMENTOS ON;
--Insertar datos en la tabla medicamento
 INSERT INTO MEDICAMENTOS (NOMBRE, LABORATORIO,PRECIO,CANTIDAD)
  VALUES('AMOXILINA 500','BAYER',15.60,100);
--Insertar datos en la tabla medicamento
 INSERT INTO MEDICAMENTOS (CODIGO,NOMBRE, LABORATORIO,PRECIO,CANTIDAD)
  VALUES(10,'AMOXILINA 500','BAYER',15.60,100);
--Se retorna el valor de inicio del campo identity
 SELECT IDENT_SEED('MEDICAMENTOS');
 --Se retorna el valor incremento del campo identity
 SELECT IDENT_INCR('MEDICAMENTOS');

 --SEGUNDO PROBLEMA
 --Si la tabla peliculas existe sera eliminada
 IF OBJECT_ID('PELICULAS') IS NOT NULL
  DROP TABLE PELICULAS;
--Crecion de la tabla peliculas
 CREATE TABLE PELICULAS(
  CODIGO INT IDENTITY (50,3),
  TITULO VARCHAR(40),
  ACTOR VARCHAR(20),
  DURACION INT
 );
 --Insertar datos en la tabla peliculas
 INSERT INTO PELICULAS (TITULO,ACTOR,DURACION)
  VALUES('MISION IMPOSIBLE','TOM CRUISE',120);
 INSERT INTO PELICULAS (TITULO,ACTOR,DURACION)
  VALUES('HARRY POTTER Y LA PIEDRA FILOSOFAL','DANIEL R.',180);
 INSERT INTO PELICULAS (TITULO,ACTOR,DURACION)
  VALUES('HARRY POTTER Y LA CAMARA SECRETA','DANIEL R.',190);
--Consultar los valores de la tabla peliculas
 SELECT * FROM PELICULAS;
--Seteo para poder ingresar valores en un campo identity
 SET IDENTITY_INSERT PELICULAS ON;
 --Insertar datos en la tabla peliculas
 INSERT INTO PELICULAS (CODIGO,TITULO,ACTOR,DURACION)
  VALUES(20,'MISION IMPOSIBLE 2','TOM CRUISE',120);
 --Insertar datos en la tabla peliculas
 INSERT INTO PELICULAS (CODIGO, TITULO,ACTOR,DURACION)
  VALUES(80,'LA VIDA ES BELLA','ZZZ',220);
--Se devuelve el valor de inicio del campo identity
 SELECT IDENT_SEED('PELICULAS');
 --Se devuelve el valor de inicio del campo identity
 SELECT IDENT_INCR('PELICULAS');
 --Inserta valores en la tabla peliculas
 INSERT INTO PELICULAS (TITULO,ACTOR,DURACION)
  VALUES('ELSA Y FRED','CHINA ZORRILLA',90);
--Setemos la funcion identtity para poder ingresar valor 
 SET IDENTITY_INSERT PELICULAS OFF; 
 --Inserta valores en la tabla peliculas
 INSERT INTO PELICULAS (TITULO,ACTOR,DURACION)
  VALUES('ELSA Y FRED','CHINA ZORRILLA',90);
--Consultar los datos de la tabla peliculas
 SELECT * FROM PELICULAS;
 
 --15 - Truncate table

 --PRIMER PROBLEMA

--Si existe la tabla alumnos se elimina
 IF OBJECT_ID('ALUMNOS') IS NOT NULL
  DROP TABLE ALUMNOS;
--Creacion de la tabla alumnos
 CREATE TABLE ALUMNOS(
  LEGAJO INT IDENTITY,
  DOCUMENTO VARCHAR(8),
  NOMBRE VARCHAR(30),
  DOMICILIO VARCHAR(30)
 );
--Insertar valores en la tabla alumnos
 INSERT INTO ALUMNOS (DOCUMENTO,NOMBRE,DOMICILIO)
  VALUES('22345345','PEREZ MARIANA','COLON 234');
 INSERT INTO ALUMNOS (DOCUMENTO,NOMBRE,DOMICILIO)
  VALUES('23545345','MORALES MARCOS','AVELLANEDA 348');
 INSERT INTO ALUMNOS (DOCUMENTO,NOMBRE,DOMICILIO)
  VALUES('24356345','GONZALEZ ANALIA','CASEROS 444');
 INSERT INTO ALUMNOS (DOCUMENTO,NOMBRE,DOMICILIO)
  VALUES('25666777','TORRES RAMIRO','DINAMARCA 209');
--Eliminar los datos de la tabla alumnos
 DELETE FROM ALUMNOS;
 --Insertar valores en la tabla alumnos
 INSERT INTO ALUMNOS (DOCUMENTO,NOMBRE,DOMICILIO)
  VALUES('22345345','PEREZ MARIANA','COLON 234');
 INSERT INTO ALUMNOS (DOCUMENTO,NOMBRE,DOMICILIO)
  VALUES('23545345','MORALES MARCOS','AVELLANEDA 348');
 INSERT INTO ALUMNOS (DOCUMENTO,NOMBRE,DOMICILIO)
  VALUES('24356345','GONZALEZ ANALIA','CASEROS 444');
 INSERT INTO ALUMNOS (DOCUMENTO,NOMBRE,DOMICILIO)
  VALUES('25666777','TORRES RAMIRO','DINAMARCA 209');
 --Consultar los datos de la tabla alumnos
 SELECT * FROM ALUMNOS;
 --Vacia la tabla alumnos
 TRUNCATE TABLE ALUMNOS;
--Insertar valores en la tabla alumnos
 INSERT INTO ALUMNOS (DOCUMENTO,NOMBRE,DOMICILIO)
  VALUES('22345345','PEREZ MARIANA','COLON 234');
 INSERT INTO ALUMNOS (DOCUMENTO,NOMBRE,DOMICILIO)
  VALUES('23545345','MORALES MARCOS','AVELLANEDA 348');
 INSERT INTO ALUMNOS (DOCUMENTO,NOMBRE,DOMICILIO)
  VALUES('24356345','GONZALEZ ANALIA','CASEROS 444');
 INSERT INTO ALUMNOS (DOCUMENTO,NOMBRE,DOMICILIO)
  VALUES('25666777','TORRES RAMIRO','DINAMARCA 209');
 --Consultar los datos de la tabla alumnos
 SELECT * FROM ALUMNOS;

 --Segundo problema

 --Sii existe la tabla articulo sera eliminada
 IF OBJECT_ID('ARTICULOS') IS NOT NULL
  DROP TABLE ARTICULOS;
--Creacion de la tabla articulos
 CREATE TABLE ARTICULOS(
  CODIGO INTEGER IDENTITY,
  NOMBRE VARCHAR(20),
  DESCRIPCION VARCHAR(30),
  PRECIO FLOAT
 );
 --Insertar valores en la tabla alumnos
 INSERT INTO ARTICULOS (NOMBRE, DESCRIPCION, PRECIO)
  VALUES ('IMPRESORA','EPSON STYLUS C45',400.80);
 INSERT INTO ARTICULOS (NOMBRE, DESCRIPCION, PRECIO)
  VALUES ('IMPRESORA','EPSON STYLUS C85',500);
--Vaciamos la tabla articulos
 TRUNCATE TABLE ARTICULOS;
 --Insertar datos a la tabla articulos
 INSERT INTO ARTICULOS (NOMBRE, DESCRIPCION, PRECIO)
  VALUES ('MONITOR','SAMSUNG 14',800);
 INSERT INTO ARTICULOS (NOMBRE, DESCRIPCION, PRECIO)
  VALUES ('TECLADO','INGLES BISWAL',100);
 INSERT INTO ARTICULOS (NOMBRE, DESCRIPCION, PRECIO)
  VALUES ('TECLADO','ESPAÑOL BISWAL',90);
  --Consultar los datos de la tabla articulos 
 SELECT * FROM ARTICULOS;
 --Eliminar los datos de la tabla articulos
 DELETE FROM ARTICULOS;
 --Insertar datos en la tabla articulos
 INSERT INTO ARTICULOS (NOMBRE, DESCRIPCION, PRECIO)
  VALUES ('MONITOR','SAMSUNG 14',800);
 INSERT INTO ARTICULOS (NOMBRE, DESCRIPCION, PRECIO)
  VALUES ('TECLADO','INGLES BISWAL',100);
 INSERT INTO ARTICULOS (NOMBRE, DESCRIPCION, PRECIO)
  VALUES ('TECLADO','ESPAÑOL BISWAL',90);
  --Consultar los datos de la tabla articulos
 SELECT * FROM ARTICULOS;

 --17 - Tipo de dato (texto)
 --Primer problema
 --Si la tabla auto existe sera eliminada
 IF OBJECT_ID('AUTOS') IS NOT NULL
  DROP TABLE AUTOS;
--Creacion de la tabla autos
 CREATE TABLE AUTOS(
  PATENTE CHAR(6),
  MARCA VARCHAR(20),
  MODELO CHAR(4),
  PRECIO FLOAT,
  PRIMARY KEY (PATENTE)
 );
 --Insertar en la tabla autos
 INSERT INTO AUTOS
  VALUES('ACD123','FIAT 128','1970',15000);
 INSERT INTO AUTOS
  VALUES('ACG234','RENAULT 11','1990',40000);
 INSERT INTO AUTOS
  VALUES('BCD333','PEUGEOT 505','1990',80000);
 INSERT INTO AUTOS
  VALUES('GCD123','RENAULT CLIO','1990',70000);
 INSERT INTO AUTOS
  VALUES('BCC333','RENAULT MEGANE','1998',95000);
 INSERT INTO AUTOS
  VALUES('BVF543','FIAT 128','1975',20000);
--Consultar los datos de la tabla autos
 SELECT * FROM AUTOS
  WHERE MODELO='1990';

  --Segundo problema
--Si la tabla clientes existe sera eliminada
 IF OBJECT_ID('CLIENTES') IS NOT NULL
  DROP TABLE CLIENTES;
--Crecion de la tabla clientes
 CREATE TABLE CLIENTES(
  DOCUMENTO CHAR(8),
  APELLIDO VARCHAR(20),
  NOMBRE VARCHAR(20),
  DOMICILIO VARCHAR(30),
  TELEFONO VARCHAR (11)
 );
--Insertar en la tabla clientes
 INSERT INTO CLIENTES
  VALUES('2233344','PEREZ','JUAN','SARMIENTO 980','4342345');
 INSERT INTO CLIENTES (DOCUMENTO,APELLIDO,NOMBRE,DOMICILIO)
  VALUES('2333344','PEREZ','ANA','COLON 234');
 INSERT INTO CLIENTES
  VALUES('2433344','GARCIA','LUIS','AVELLANEDA 1454','4558877');
 INSERT INTO CLIENTES
  VALUES('2533344','JUAREZ','ANA','URQUIZA 444','4789900');
--Coonsultar los datos de la tala donde el apellido es igual a perez
 SELECT * FROM CLIENTES
  WHERE APELLIDO='PEREZ';

-- 18 - TIPO DE DATO (NUMÉRICO)
--Primer problema
--Si la tabla Cuentas existe sera eliminada
IF OBJECT_ID('CUENTAS') IS NOT NULL
  DROP TABLE CUENTAS;
--Crecion de la tabla
 CREATE TABLE CUENTAS(
  NUMERO INT NOT NULL,
  DOCUMENTO CHAR(8),
  NOMBRE VARCHAR(30),
  SALDO MONEY,
  PRIMARY KEY (NUMERO)
 );
 --Inserta en la tabla 
 INSERT INTO CUENTAS(NUMERO,DOCUMENTO,NOMBRE,SALDO)
  VALUES('1234','25666777','PEDRO PEREZ',500000.60);
 INSERT INTO CUENTAS(NUMERO,DOCUMENTO,NOMBRE,SALDO)
  VALUES('2234','27888999','JUAN LOPEZ',-250000);
 INSERT INTO CUENTAS(NUMERO,DOCUMENTO,NOMBRE,SALDO)
  VALUES('3344','27888999','JUAN LOPEZ',4000.50);
 INSERT INTO CUENTAS(NUMERO,DOCUMENTO,NOMBRE,SALDO)
  VALUES('3346','32111222','SUSANA MOLINA',1000);
--Consultar los saldos que sean mayores de 4000 de la tabla cuentas
 SELECT * FROM CUENTAS
  WHERE SALDO<4000;
--Selecciona el numero el saldo de la tabla cuentas donde el nombre es igual a juan perez
 SELECT NUMERO,SALDO FROM CUENTAS
  WHERE NOMBRE='JUAN LOPEZ';
--Consultar los saldo de la tabla cuentas que sean menores de 0
 SELECT * FROM CUENTAS
  WHERE SALDO<0;
--Consulta las cuntas que donde su numero esa mayor o igua al a 3000
 SELECT * FROM CUENTAS
  WHERE NUMERO>=3000;

--Segundo probleama
--Si la tabla empleado existe sera eliminada
 IF OBJECT_ID('EMPLEADOS') IS NOT NULL
  DROP TABLE EMPLEADOS;
--Creacion de la tabla
 CREATE TABLE EMPLEADOS(
  NOMBRE VARCHAR(30),
  DOCUMENTO CHAR(8),
  SEXO CHAR(1),
  DOMICILIO VARCHAR(30),
  SUELDOBASICO DECIMAL(7,2),--MÁXIMO ESTIMADO 99999.99
  CANTIDADHIJOS TINYINT--NO SUPERARÁ LOS 255
 );
 --Insertar en la tabla
 INSERT INTO EMPLEADOS (NOMBRE,DOCUMENTO,SEXO,DOMICILIO,SUELDOBASICO,CANTIDADHIJOS)
  VALUES ('JUAN PEREZ','22333444','M','SARMIENTO 123',500,2);
 INSERT INTO EMPLEADOS (NOMBRE,DOCUMENTO,SEXO,DOMICILIO,SUELDOBASICO,CANTIDADHIJOS)
  VALUES ('ANA ACOSTA','24555666','F','COLON 134',850,0);
 INSERT INTO EMPLEADOS (NOMBRE,DOCUMENTO,SEXO,DOMICILIO,SUELDOBASICO,CANTIDADHIJOS)
  VALUES ('BARTOLOME BARRIOS','27888999','M','URQUIZA 479',10000.80,4);

 INSERT INTO EMPLEADOS (NOMBRE,DOCUMENTO,SEXO,DOMICILIO,SUELDOBASICO,CANTIDADHIJOS)
  VALUES ('SUSANA MOLINA','29000555','F','SALTA 876',800.888,3);

 INSERT INTO EMPLEADOS (NOMBRE,DOCUMENTO,SEXO,DOMICILIO,SUELDOBASICO,CANTIDADHIJOS)
  VALUES ('MARTA JUAREZ','32444555','F','SUCRE 1086',5000000,2);
--Consultar sueldosbasico que sean mayores o igual a 900 de la tabla empleado
 SELECT * FROM EMPLEADOS
  WHERE SUELDOBASICO>=900;
--Consultar sueldosbasico que sean mayores a 0 de la tabla empleado
 SELECT * FROM EMPLEADOS
  WHERE CANTIDADHIJOS>0;

--19 - Tipo de dato (fecha y hora)
--Primer problema
--Si la tabla alumno existe sera eliminada
IF OBJECT_ID('ALUMNOS') IS NOT NULL
  DROP TABLE ALUMNOS;
--Crecion de la tabla alumnos
 CREATE TABLE ALUMNOS(
  APELLIDO VARCHAR(30),
  NOMBRE VARCHAR(30),
  DOCUMENTO CHAR(8),
  DOMICILIO VARCHAR(30),
  FECHAINGRESO DATETIME,
  FECHANACIMIENTO DATETIME
 );

 SET DATEFORMAT 'DMY';
 --Insertar datos en la tabla alunmos
 INSERT INTO ALUMNOS VALUES('GONZALEZ','ANA','22222222','COLON 123','10-08-1990','15/02/1972');

 INSERT INTO ALUMNOS VALUES('JUAREZ','BERNARDO','25555555','SUCRE 456','03-03-1991','15/02/1972');

 INSERT INTO ALUMNOS VALUES('PEREZ','LAURA','26666666','BULNES 345','03-03-91',NULL);

 INSERT INTO ALUMNOS VALUES('LOPEZ','CARLOS','27777777','SARMIENTO 1254','03-15-1990',NULL);
--Consultar los datos de los alumnos que se fecha de ingreso sea menos 1-1-91
 SELECT * FROM ALUMNOS WHERE FECHAINGRESO<'1-1-91';
 --Consultar los datos de los alumnos que se fecha de ingreso sea null
 SELECT * FROM ALUMNOS WHERE FECHANACIMIENTO IS NULL;
 --insertar datos en la tabla alumnos
 INSERT INTO ALUMNOS VALUES('ROSAS','ROMINA','28888888','AVELLANEDA 487','03151990',NULL);

 SET DATEFORMAT 'MDY';
  --insertar datos en la tabla alumnos
 INSERT INTO ALUMNOS VALUES('LOPEZ','CARLOS','27777777','SARMIENTO 1254','03-15-1990',null);

---20 - Ingresar algunos campos (insert into)
--Si la tabla cuenta existe sera borrada
IF OBJECT_ID('CUENTAS') IS NOT NULL
  DROP TABLE CUENTAS;
--Creacin de la tabla
 CREATE TABLE CUENTAS(
  NUMERO INT IDENTITY,
  DOCUMENTO CHAR(8) NOT NULL,
  NOMBRE VARCHAR(30),
  SALDO MONEY
 );
 --Insertar en la tabla
 INSERT INTO CUENTAS
  VALUES (1,'25666777','JUAN PEREZ',2500.50);

 INSERT INTO CUENTAS
  VALUES ('25666777','JUAN PEREZ',2500.50);

 INSERT INTO CUENTAS (DOCUMENTO,SALDO)
  VALUES ('28999777',-5500);

 INSERT INTO CUENTAS (NUMERO,DOCUMENTO,NOMBRE,SALDO)
  VALUES (5,'28999777','LUIS LOPEZ',34000);

 INSERT INTO CUENTAS (NUMERO,DOCUMENTO,NOMBRE)
  VALUES (3344,'28999777','LUIS LOPEZ',34000);

 INSERT INTO CUENTAS (NOMBRE, SALDO)
  VALUES ('LUIS LOPEZ',34000);
  --Consultar en la tabla
 SELECT * FROM LIBROS;


-- 21 - Valores por defecto (default)
--Primer problema
--Si la tabla vistante existe sera borrada
IF OBJECT_ID('VISITANTES') IS NOT NULL
  DROP TABLE VISITANTES;
  --Creacion de la tabla
 CREATE TABLE VISITANTES(
  NOMBRE VARCHAR(30),
  EDAD TINYINT,
  SEXO CHAR(1) DEFAULT 'F',
  DOMICILIO VARCHAR(30),
  CIUDAD VARCHAR(20) DEFAULT 'CORDOBA',
  TELEFONO VARCHAR(11),
  MAIL VARCHAR(30) DEFAULT 'NO TIENE',
  MONTOCOMPRA DECIMAL (6,2)
 );
 --Ver la comuna visitantes
 EXEC SP_COLUMNS VISITANTES;
--Inserar datos en la tabla
 INSERT INTO VISITANTES (NOMBRE, DOMICILIO, MONTOCOMPRA)
  VALUES ('SUSANA MOLINA','COLON 123',59.80);
 INSERT INTO VISITANTES (NOMBRE, EDAD, CIUDAD, MAIL)
  VALUES ('MARCOS TORRES',29,'CARLOS PAZ','MARCOSTORRES@HOTMAIL.COM');
--Consultar los datos de la tabla
 SELECT *FROM VISITANTES;
 --Insertar datos en la tabla
 INSERT INTO VISITANTES
  VALUES ('MARCELO MORALES',38,DEFAULT,DEFAULT,DEFAULT,'4255232','MARCELOMORALES@HOTMAIL.COM',DEFAULT);

 INSERT INTO VISITANTES DEFAULT VALUES;
 --Cinsultar los datos de la tabla visitantes
 SELECT * FROM VISITANTES;

 --Segundo parcial
 --Si la tabla prestamos existe sera borrada
 IF OBJECT_ID('PRESTAMOS') IS NOT NULL
  DROP TABLE PRESTAMOS;
---Creacion de l tabla
 CREATE TABLE PRESTAMOS(
  TITULO VARCHAR(40) NOT NULL,
  DOCUMENTO CHAR(8) NOT NULL,
  FECHAPRESTAMO DATETIME NOT NULL,
  FECHADEVOLUCION DATETIME,
  DEVUELTO CHAR(1) DEFAULT 'N'
 );
 --Insertar en la tabla
 INSERT INTO PRESTAMOS (TITULO,DOCUMENTO,FECHAPRESTAMO,FECHADEVOLUCION)
  VALUES ('MANUAL DE 1 GRADO','23456789','2006-12-15','2006-12-18');
 INSERT INTO PRESTAMOS (TITULO,DOCUMENTO,FECHAPRESTAMO)
  VALUES ('ALICIA EN EL PAIS DE LAS MARAVILLAS','23456789','2006-12-16');
 INSERT INTO PRESTAMOS (TITULO,DOCUMENTO,FECHAPRESTAMO,FECHADEVOLUCION)
  VALUES ('EL ALEPH','22543987','2006-12-16','2006-08-19');
 INSERT INTO PRESTAMOS (TITULO,DOCUMENTO,FECHAPRESTAMO,DEVUELTO)
  VALUES ('MANUAL DE GEOGRAFIA 5 GRADO','25555666','2006-12-18','S');
--Consultar datos
 SELECT * FROM PRESTAMOS;
  --Insertar en la tabla
 INSERT INTO PRESTAMOS
  VALUES('MANUAL DE HISTORIA','32555666','2006-10-25',DEFAULT,DEFAULT);
--Consultar datos de la tabla
 SELECT * FROM PRESTAMOS;
 --Insertar valor por defecto en la tabla prestamos
 INSERT INTO PRESTAMOS DEFAULT VALUES;


 
 --22 - Columnas calculadas (operadores aritméticos y de concatenación)
--Si la tabla articulo existe sera eliminada
IF OBJECT_ID ('ARTICULOS') IS NOT NULL
  DROP TABLE ARTICULOS;
--Crecion de la tabla articulos
 CREATE TABLE ARTICULOS(
  CODIGO INT IDENTITY,
  NOMBRE VARCHAR(20),
  DESCRIPCION VARCHAR(30),
  PRECIO SMALLMONEY,
  CANTIDAD TINYINT DEFAULT 0,
  PRIMARY KEY (CODIGO)
 );
 --Insertar los datos en la tabla
 INSERT INTO ARTICULOS (NOMBRE, DESCRIPCION, PRECIO,CANTIDAD)
  VALUES ('IMPRESORA','EPSON STYLUS C45',400.80,20);
 INSERT INTO ARTICULOS (NOMBRE, DESCRIPCION, PRECIO)
  VALUES ('IMPRESORA','EPSON STYLUS C85',500);
 INSERT INTO ARTICULOS (NOMBRE, DESCRIPCION, PRECIO)
  VALUES ('MONITOR','SAMSUNG 14',800);
 INSERT INTO ARTICULOS (NOMBRE, DESCRIPCION, PRECIO,CANTIDAD)
  VALUES ('TECLADO','INGLES BISWAL',100,50);
--Actualizar los el precio de la tabla articulo
 UPDATE ARTICULOS SET PRECIO=PRECIO+(PRECIO*0.15);
 --Consultar los datos de la tabla articulo
 SELECT * FROM ARTICULOS;
 --Consultar 
 SELECT NOMBRE+','+DESCRIPCION as Datos
  FROM ARTICULOS;
--Actualizar la cantida de los nombre son iguales a teclado de la tabla articulos
 UPDATE ARTICULOS SET CANTIDAD=CANTIDAD-5
 WHERE NOMBRE='TECLADO';
 --Consultar los datos de los articulos 
 SELECT * FROM ARTICULOS;

--23 - Alias
--Si la tabla libros existe sera creada nueva vez
IF OBJECT_ID ('LIBROS') IS NOT NULL
  DROP TABLE LIBROS;
--Crecion de la tabla
 CREATE TABLE LIBROS(
  CODIGO INT IDENTITY,
  TITULO VARCHAR(40) NOT NULL,
  AUTOR VARCHAR(20) DEFAULT 'DESCONOCIDO',
  EDITORIAL VARCHAR(20),
  PRECIO DECIMAL(6,2),
  CANTIDAD TINYINT DEFAULT 0,
  PRIMARY KEY (CODIGO)
 );
 --Insertar en la tabla
 INSERT INTO LIBROS (TITULO,AUTOR,EDITORIAL,PRECIO)
  VALUES('EL ALEPH','BORGES','EMECE',25);
 INSERT INTO LIBROS
  VALUES('JAVA EN 10 MINUTOS','MARIO MOLINA','SIGLO XXI',50.40,100);
 INSERT INTO LIBROS (TITULO,AUTOR,EDITORIAL,PRECIO,CANTIDAD)
  VALUES('ALICIA EN EL PAIS DE LAS MARAVILLAS','LEWIS CARROLL','EMECE',15,50);
--Consulta
 SELECT TITULO, AUTOR,EDITORIAL,PRECIO,CANTIDAD,
  PRECIO*CANTIDAD AS 'MONTO TOTAL'
  FROM LIBROS;
--Consulta
 SELECT TITULO,AUTOR,PRECIO,
  PRECIO*0.1 AS DESCUENTO,
  PRECIO-(PRECIO*0.1) AS 'PRECIO FINAL'
  FROM LIBROS
  WHERE EDITORIAL='EMECE';
--Consulta
 SELECT TITULO+'-'+AUTOR AS "TÍTULO Y AUTOR"
  FROM LIBROS;
  
  --25

  --26

  --27- FUNCIONES PARA EL USO DE FECHAS Y HORAS

IF OBJECT_ID ('EMPLEADOS') IS NOT NULL

DROP TABLE EMPLEADOS;


CREATE TABLE EMPLEADOS(

NOMBRE VARCHAR(30) NOT NULL,

APELLIDO VARCHAR(20) NOT NULL,

DOCUMENTO CHAR(8),

FECHANACIMIENTO DATETIME,

FECHAINGRESO DATETIME,

SUELDO DECIMAL(6,2),

PRIMARY KEY(DOCUMENTO)

);

INSERT INTO EMPLEADOS VALUES('ANABEL','ACOSTA','2272222','1970/10/10','1995/05/05',228.50);

INSERT INTO EMPLEADOS VALUES('CARLO','CASERES','25555555','1978/02/06','1998/05/05',309);

INSERT INTO EMPLEADOS VALUES('FRANCIS','GARCIA','26666666','1978/10/15','1998/10/02',250.68);

INSERT INTO EMPLEADOS VALUES('GABRIEL','GARCIA','3050000','1985/10/25','2000/12/22',300.25);

INSERT INTO EMPLEADOS VALUES('LUIS','LANGEL','31111011','1987/02/10','2000/08/21',350.98);


SELECT NOMBRE+SPACE(1)+UPPER(APELLIDO) AS NOMBRE,

STUFF(DOCUMENTO,1,0,'DNI Nº ') AS DOCUMENTO,

STUFF(SUELDO,1,0,'$ ') AS SUELDO FROM EMPLEADOS;


SELECT DOCUMENTO, STUFF(CEILING(SUELDO),1,0,'$ ') FROM EMPLEADOS;



SELECT NOMBRE,APELLIDO FROM EMPLEADOS

WHERE DATENAME(MONTH,FECHANACIMIENTO)='OCTOBER';



SELECT NOMBRE,APELLIDO FROM EMPLEADOS

WHERE DATEPART(YEAR,FECHAINGRESO)=2000;


--28- ORDENAR REGISTROS (ORDER BY)



IF OBJECT_ID('VISITAS') IS NOT NULL

DROP TABLE VISITAS;



CREATE TABLE VISITAS (

NUMERO INT IDENTITY,

NOMBRE VARCHAR(30) DEFAULT 'ANONIMO',

MAIL VARCHAR(50),

PAIS VARCHAR (20),

FECHA DATETIME,

PRIMARY KEY(NUMERO)

);



INSERT INTO VISITAS (NOMBRE,MAIL,PAIS,FECHA)

VALUES ('ANA MARIA LOPEZ','ANAMARIA@HOTMAIL.COM','ARGENTINA','2006-10-10 10:10');

INSERT INTO VISITAS (NOMBRE,MAIL,PAIS,FECHA)

VALUES ('GUSTAVO GONZALEZ','GUSTAVOGGONZALEZ@HOTMAIL.COM','CHILE','2006-10-10 21:30');

INSERT INTO VISITAS (NOMBRE,MAIL,PAIS,FECHA)

VALUES ('JUANCITO','JUANJOSEPEREZ@HOTMAIL.COM','ARGENTINA','2006-10-11 15:45');

INSERT INTO VISITAS (NOMBRE,MAIL,PAIS,FECHA)

VALUES ('FABIOLA MARTINEZ','MARTINEZFABIOLA@HOTMAIL.COM','MEXICO','2006-10-12 08:15');

INSERT INTO VISITAS (NOMBRE,MAIL,PAIS,FECHA)

VALUES ('FABIOLA MARTINEZ','MARTINEZFABIOLA@HOTMAIL.COM','MEXICO','2006-09-12 20:45');

INSERT INTO VISITAS (NOMBRE,MAIL,PAIS,FECHA)

VALUES ('JUANCITO','JUANJOSEPEREZ@HOTMAIL.COM','ARGENTINA','2006-09-12 16:20');

INSERT INTO VISITAS (NOMBRE,MAIL,PAIS,FECHA)

VALUES ('JUANCITO','JUANJOSEPEREZ@HOTMAIL.COM','ARGENTINA','2006-09-15 16:25');



SELECT *FROM VISITAS

ORDER BY FECHA DESC;



SELECT NOMBRE,PAIS,DATENAME(MONTH,FECHA)

FROM VISITAS

ORDER BY PAIS,DATENAME(MONTH,FECHA) DESC;



SELECT NOMBRE,MAIL,

DATENAME(MONTH,FECHA) MES,

DATENAME(DAY,FECHA) DIA,

DATENAME(HOUR,FECHA) HORA

FROM VISITAS

ORDER BY 3,4,5;



SELECT MAIL, PAIS

FROM VISITAS

WHERE DATENAME(MONTH,FECHA)='OCTOBER'

ORDER BY 2;


--29- OPERADORES LOGICOS (AND-OR-NOT)


--PRIMER PROBLEMA.

IF OBJECT_ID('MEDICAMENTOS') IS NOT NULL

DROP TABLE MEDICAMENTOS;



CREATE TABLE MEDICAMENTOS(

CODIGO INT IDENTITY,

NOMBRE VARCHAR(20),

LABORATORIO VARCHAR(20),

PRECIO DECIMAL(5,2),

CANTIDAD TINYINT,

PRIMARY KEY(CODIGO)

);



INSERT INTO MEDICAMENTOS

VALUES('SERTAL','ROCHE',5.2,100);

INSERT INTO MEDICAMENTOS

VALUES('BUSCAPINA','ROCHE',4.10,200);

INSERT INTO MEDICAMENTOS

VALUES('AMOXIDAL 500','BAYER',15.60,100);

INSERT INTO MEDICAMENTOS

VALUES('PARACETAMOL 500','BAGO',1.90,200);

INSERT INTO MEDICAMENTOS

VALUES('BAYASPIRINA','BAYER',2.10,150); 

INSERT INTO MEDICAMENTOS

VALUES('AMOXIDAL JARABE','BAYER',5.10,250); 



SELECT CODIGO,NOMBRE

FROM MEDICAMENTOS

WHERE LABORATORIO='ROCHE' AND

PRECIO<5;



SELECT * FROM MEDICAMENTOS

WHERE LABORATORIO='ROCHE' OR

PRECIO<5;



SELECT * FROM MEDICAMENTOS

WHERE NOT LABORATORIO='BAYER' AND

CANTIDAD=100;



SELECT * FROM MEDICAMENTOS

WHERE LABORATORIO='BAYER' AND

NOT CANTIDAD=100;



DELETE FROM MEDICAMENTOS

WHERE LABORATORIO='BAYER' AND

PRECIO>10;



UPDATE MEDICAMENTOS SET CANTIDAD=200

WHERE LABORATORIO='ROCHE' AND

PRECIO>5;



DELETE FROM MEDICAMENTOS

WHERE LABORATORIO='BAYER' OR

PRECIO<3;




--SEGUNDO PROBLEMA

IF OBJECT_ID('PELICULAS') IS NOT NULL

DROP TABLE PELICULAS;



CREATE TABLE PELICULAS(

CODIGO INT IDENTITY,

TITULO VARCHAR(40) NOT NULL,

ACTOR VARCHAR(20),

DURACION TINYINT,

PRIMARY KEY (CODIGO)

);



INSERT INTO PELICULAS

VALUES('MISION IMPOSIBLE','TOM CRUISE',120);

INSERT INTO PELICULAS

VALUES('HARRY POTTER Y LA PIEDRA FILOSOFAL','DANIEL R.',180);

INSERT INTO PELICULAS

VALUES('HARRY POTTER Y LA CAMARA SECRETA','DANIEL R.',190);

INSERT INTO PELICULAS

VALUES('MISION IMPOSIBLE 2','TOM CRUISE',120);

INSERT INTO PELICULAS

VALUES('MUJER BONITA','RICHARD GERE',120);

INSERT INTO PELICULAS

VALUES('TOOTSIE','D. HOFFMAN',90);

INSERT INTO PELICULAS

VALUES('UN OSO ROJO','JULIO CHAVEZ',100);

INSERT INTO PELICULAS

VALUES('ELSA Y FRED','CHINA ZORRILLA',110);



SELECT *FROM PELICULAS

WHERE ACTOR='TOM CRUISE' OR

ACTOR='RICHARD GERE';



SELECT *FROM PELICULAS

WHERE ACTOR='TOM CRUISE' AND

DURACION<100;



UPDATE PELICULAS SET DURACION=200

WHERE ACTOR='DANIEL R.' AND

DURACION=180;



DELETE FROM PELICULAS

WHERE NOT ACTOR='TOM CRUISE' AND

DURACION<=100;






--30- OTROS OPERADORES RELACIONALES (IS NULL)



IF OBJECT_ID('PELICULAS') IS NOT NULL

DROP TABLE PELICULAS;



CREATE TABLE PELICULAS(

CODIGO INT IDENTITY,

TITULO VARCHAR(40) NOT NULL,

ACTOR VARCHAR(20),

DURACION TINYINT,

PRIMARY KEY (CODIGO)

);



INSERT INTO PELICULAS

VALUES('MISION IMPOSIBLE','TOM CRUISE',120);

INSERT INTO PELICULAS

VALUES('HARRY POTTER Y LA PIEDRA FILOSOFAL','DANIEL R.',NULL);

INSERT INTO PELICULAS

VALUES('HARRY POTTER Y LA CAMARA SECRETA','DANIEL R.',190);

INSERT INTO PELICULAS

VALUES('MISION IMPOSIBLE 2','TOM CRUISE',120);

INSERT INTO PELICULAS

VALUES('MUJER BONITA',NULL,120);

INSERT INTO PELICULAS

VALUES('TOOTSIE','D. HOFFMAN',90);

INSERT INTO PELICULAS (TITULO)

VALUES('UN OSO ROJO');



SELECT *FROM PELICULAS

WHERE ACTOR IS NULL;



UPDATE PELICULAS SET DURACION=0

WHERE DURACION IS NULL;



DELETE FROM PELICULAS

WHERE ACTOR IS NULL AND

DURACION=0;



SELECT * FROM PELICULAS;





--31- OTROS OPERADORES RELACIONALES (BETWEEN)



IF OBJECT_ID('VISITAS') IS NOT NULL

DROP TABLE VISITAS;



CREATE TABLE VISITAS (

NUMERO INT IDENTITY,

NOMBRE VARCHAR(30) DEFAULT 'ANONIMO',

MAIL VARCHAR(50),

PAIS VARCHAR (20),

FECHAYHORA DATETIME,

PRIMARY KEY(NUMERO)

);



INSERT INTO VISITAS (NOMBRE,MAIL,PAIS,FECHAYHORA)

VALUES ('ANA MARIA LOPEZ','ANAMARIA@HOTMAIL.COM','ARGENTINA','2006-10-10 10:10');

INSERT INTO VISITAS (NOMBRE,MAIL,PAIS,FECHAYHORA)

VALUES ('GUSTAVO GONZALEZ','GUSTAVOGGONZALEZ@GOTMAIL.COM','CHILE','2006-10-10 21:30');

INSERT INTO VISITAS (NOMBRE,MAIL,PAIS,FECHAYHORA)

VALUES ('JUANCITO','JUANJOSEPEREZ@HOTMAIL.COM','ARGENTINA','2006-10-11 15:45');

INSERT INTO VISITAS (NOMBRE,MAIL,PAIS,FECHAYHORA)

VALUES ('FABIOLA MARTINEZ','MARTINEZFABIOLA@HOTMAIL.COM','MEXICO','2006-10-12 08:15');

INSERT INTO VISITAS (NOMBRE,MAIL,PAIS,FECHAYHORA)

VALUES ('FABIOLA MARTINEZ','MARTINEZFABIOLA@HOTMAIL.COM','MEXICO','2006-09-12 20:45');

INSERT INTO VISITAS (NOMBRE,MAIL,PAIS,FECHAYHORA)

VALUES ('JUANCITO','JUANJOSEPEREZ@GMAIL.COM','ARGENTINA','2006-09-12 16:20');

INSERT INTO VISITAS (NOMBRE,MAIL,PAIS,FECHAYHORA)

VALUES ('JUANCITO','JUANJOSEPEREZ@HOTMAIL.COM','ARGENTINA','2006-09-15 16:25');

INSERT INTO VISITAS (NOMBRE,MAIL,PAIS)

VALUES ('FEDERICO1','FEDERICOGARCIA@XAXAMAIL.COM','ARGENTINA');



SELECT *FROM VISITAS

WHERE FECHAYHORA BETWEEN '2006-09-12' AND '2006-10-11';



SELECT *FROM VISITAS

WHERE NUMERO BETWEEN 2 AND 5;





--32- OTROS OPERADORES RELACIONALES (IN)



IF OBJECT_ID('MEDICAMENTOS') IS NOT NULL

DROP TABLE MEDICAMENTOS;



CREATE TABLE MEDICAMENTOS(

CODIGO INT IDENTITY,

NOMBRE VARCHAR(20),

LABORATORIO VARCHAR(20),

PRECIO DECIMAL(6,2),

CANTIDAD TINYINT,

FECHAVENCIMIENTO DATETIME NOT NULL,

PRIMARY KEY(CODIGO)

);



INSERT INTO MEDICAMENTOS

VALUES('SERTAL','ROCHE',5.2,1,'2005-02-01');

INSERT INTO MEDICAMENTOS 

VALUES('BUSCAPINA','ROCHE',4.10,3,'2006-03-01');

INSERT INTO MEDICAMENTOS 

VALUES('AMOXIDAL 500','BAYER',15.60,100,'2007-05-01');

INSERT INTO MEDICAMENTOS

VALUES('PARACETAMOL 500','BAGO',1.90,20,'2008-02-01');

INSERT INTO MEDICAMENTOS 

VALUES('BAYASPIRINA','BAYER',2.10,150,'2009-12-01'); 

INSERT INTO MEDICAMENTOS 

VALUES('AMOXIDAL JARABE','BAYER',5.10,250,'2010-10-01'); 



SELECT NOMBRE,PRECIO FROM MEDICAMENTOS

WHERE LABORATORIO IN ('BAYER','BAGO');



SELECT *FROM MEDICAMENTOS

WHERE CANTIDAD BETWEEN 1 AND 5;



SELECT *FROM MEDICAMENTOS

WHERE CANTIDAD IN (1,2,3,4,5);





--33- BÚSQUEDA DE PATRONES (LIKE - NOT LIKE)



IF OBJECT_ID('EMPLEADOS') IS NOT NULL

DROP TABLE EMPLEADOS;



CREATE TABLE EMPLEADOS(

NOMBRE VARCHAR(30),

DOCUMENTO CHAR(8),

DOMICILIO VARCHAR(30),

FECHAINGRESO DATETIME,

SECCION VARCHAR(20),

SUELDO DECIMAL(6,2),

PRIMARY KEY(DOCUMENTO)

);



INSERT INTO EMPLEADOS

VALUES('JUAN PEREZ','22333444','COLON 123','1990-10-08','GERENCIA',900.50);

INSERT INTO EMPLEADOS

VALUES('ANA ACOSTA','23444555','CASEROS 987','1995-12-18','SECRETARIA',590.30);

INSERT INTO EMPLEADOS

VALUES('LUCAS DUARTE','25666777','SUCRE 235','2005-05-15','SISTEMAS',790);

INSERT INTO EMPLEADOS

VALUES('PAMELA GONZALEZ','26777888','SARMIENTO 873','1999-02-12','SECRETARIA',550);

INSERT INTO EMPLEADOS

VALUES('MARCOS JUAREZ','30000111','RIVADAVIA 801','2002-09-22','CONTADURIA',630.70);

INSERT INTO EMPLEADOS

VALUES('YOLANDA PEREZ','35111222','COLON 180','1990-10-08','ADMINISTRACION',400);

INSERT INTO EMPLEADOS

VALUES('RODOLFO PEREZ','35555888','CORONEL OLMEDO 588','1990-05-28','SISTEMAS',800);



SELECT *FROM EMPLEADOS

WHERE NOMBRE LIKE '%PEREZ%';



SELECT *FROM EMPLEADOS

WHERE DOMICILIO LIKE 'CO%8%';



SELECT *FROM EMPLEADOS

WHERE DOCUMENTO LIKE '%[02468]';



SELECT *FROM EMPLEADOS

WHERE DOCUMENTO LIKE '[^13]%' AND

NOMBRE LIKE '%EZ';



SELECT NOMBRE FROM EMPLEADOS

WHERE NOMBRE LIKE '%[YJ]%';



SELECT NOMBRE,SECCION FROM EMPLEADOS

WHERE SECCION LIKE '[SG]_______';



SELECT NOMBRE,SECCION FROM EMPLEADOS

WHERE SECCION NOT LIKE '[SG]%';



SELECT NOMBRE,SUELDO FROM EMPLEADOS

WHERE SUELDO NOT LIKE '%.00';



SELECT *FROM EMPLEADOS

WHERE FECHAINGRESO LIKE '%1990%';





--34- CONTAR REGISTROS (COUNT)



IF OBJECT_ID('MEDICAMENTOS') IS NOT NULL

DROP TABLE MEDICAMENTOS;



CREATE TABLE MEDICAMENTOS(

CODIGO INT IDENTITY,

NOMBRE VARCHAR(20),

LABORATORIO VARCHAR(20),

PRECIO DECIMAL(6,2),

CANTIDAD TINYINT,

FECHAVENCIMIENTO DATETIME NOT NULL,

NUMEROLOTE INT DEFAULT NULL,

PRIMARY KEY(CODIGO)

);



INSERT INTO MEDICAMENTOS

VALUES('SERTAL','ROCHE',5.2,1,'2005-02-01',NULL);

INSERT INTO MEDICAMENTOS 

VALUES('BUSCAPINA','ROCHE',4.10,3,'2006-03-01',NULL);

INSERT INTO MEDICAMENTOS 

VALUES('AMOXIDAL 500','BAYER',15.60,100,'2007-05-01',NULL);

INSERT INTO MEDICAMENTOS

VALUES('PARACETAMOL 500','BAGO',1.90,20,'2008-02-01',NULL);

INSERT INTO MEDICAMENTOS 

VALUES('BAYASPIRINA',NULL,2.10,NULL,'2009-12-01',NULL); 

INSERT INTO MEDICAMENTOS 

VALUES('AMOXIDAL JARABE','BAYER',NULL,250,'2009-12-15',NULL); 



SELECT COUNT(*)

FROM MEDICAMENTOS;



SELECT COUNT(LABORATORIO)

FROM MEDICAMENTOS;



SELECT COUNT(PRECIO) AS 'CON PRECIO',

COUNT(CANTIDAD) AS 'CON CANTIDAD'

FROM MEDICAMENTOS;



SELECT COUNT(PRECIO)

FROM MEDICAMENTOS

WHERE LABORATORIO LIKE 'B%';



SELECT COUNT(NUMEROLOTE) FROM MEDICAMENTOS;


--35- CONTAR REGISTROS (COUNT_BIG)
IF OBJECT_ID('MEDICAMENTOS') IS NOT NULL
  DROP TABLE MEDICAMENTOS;

 CREATE TABLE MEDICAMENTOS(
  CODIGO INT IDENTITY,
  NOMBRE VARCHAR(20),
  LABORATORIO VARCHAR(20),
  PRECIO DECIMAL(6,2),
  CANTIDAD TINYINT,
  FECHAVENCIMIENTO DATETIME NOT NULL,
  NUMEROLOTE INT DEFAULT NULL,
  PRIMARY KEY(CODIGO)
 );

 INSERT INTO MEDICAMENTOS
  VALUES('SERTAL','ROCHE',5.2,1,'2015-02-01',NULL);
 INSERT INTO MEDICAMENTOS 
  VALUES('BUSCAPINA','ROCHE',4.10,3,'2016-03-01',NULL);
 INSERT INTO MEDICAMENTOS 
  VALUES('AMOXIDAL 500','BAYER',15.60,100,'2017-05-01',NULL);
 INSERT INTO MEDICAMENTOS
  VALUES('PARACETAMOL 500','BAGO',1.90,20,'2018-02-01',NULL);
 INSERT INTO MEDICAMENTOS 
  VALUES('BAYASPIRINA',NULL,2.10,NULL,'2019-12-01',NULL); 
  INSERT INTO MEDICAMENTOS 
  VALUES('AMOXIDAL JARABE','BAYER',NULL,250,'2019-12-15',NULL); 

 SELECT COUNT_BIG(*)
  FROM MEDICAMENTOS;

 SELECT COUNT_BIG(DISTINCT LABORATORIO)
   FROM MEDICAMENTOS;

 SELECT COUNT_BIG(PRECIO) AS 'CON PRECIO',
  COUNT_BIG(CANTIDAD) AS 'CON CANTIDAD'
  FROM MEDICAMENTOS;



--36- FUNCIONES DE AGRUPAMIENTO (COUNT - SUM - MIN - MAX - AVG) 



IF OBJECT_ID('EMPLEADOS') IS NOT NULL

DROP TABLE EMPLEADOS;



CREATE TABLE EMPLEADOS(

NOMBRE VARCHAR(30),

DOCUMENTO CHAR(8),

DOMICILIO VARCHAR(30),

SECCION VARCHAR(20),

SUELDO DECIMAL(6,2),

CANTIDADHIJOS TINYINT,

PRIMARY KEY(DOCUMENTO)

);



INSERT INTO EMPLEADOS

VALUES('JUAN PEREZ','22333444','COLON 123','GERENCIA',5000,2);

INSERT INTO EMPLEADOS

VALUES('ANA ACOSTA','23444555','CASEROS 987','SECRETARIA',2000,0);

INSERT INTO EMPLEADOS

VALUES('LUCAS DUARTE','25666777','SUCRE 235','SISTEMAS',4000,1);

INSERT INTO EMPLEADOS

VALUES('PAMELA GONZALEZ','26777888','SARMIENTO 873','SECRETARIA',2200,3);

INSERT INTO EMPLEADOS

VALUES('MARCOS JUAREZ','30000111','RIVADAVIA 801','CONTADURIA',3000,0);

INSERT INTO EMPLEADOS

VALUES('YOLANDA PEREZ','35111222','COLON 180','ADMINISTRACION',3200,1);

INSERT INTO EMPLEADOS

VALUES('RODOLFO PEREZ','35555888','CORONEL OLMEDO 588','SISTEMAS',4000,3);

INSERT INTO EMPLEADOS

VALUES('MARTINA RODRIGUEZ','30141414','SARMIENTO 1234','ADMINISTRACION',3800,4);

INSERT INTO EMPLEADOS

VALUES('ANDRES COSTA','28444555',DEFAULT,'SECRETARIA',NULL,NULL);



SELECT COUNT(*)

FROM EMPLEADOS;



SELECT COUNT(SUELDO)

FROM EMPLEADOS

WHERE SECCION='SECRETARIA';



SELECT MAX(SUELDO) AS 'MAYOR SUELDO',

MIN(SUELDO) AS 'MENOR SUELDO'

FROM EMPLEADOS;



SELECT MAX(CANTIDADHIJOS)

FROM EMPLEADOS

WHERE NOMBRE LIKE '%PEREZ%';



SELECT AVG(SUELDO)

FROM EMPLEADOS;



SELECT AVG(SUELDO)

FROM EMPLEADOS

WHERE SECCION='SECRETARIA';



SELECT AVG(CANTIDADHIJOS)

FROM EMPLEADOS

WHERE SECCION='SISTEMAS';





--37- AGRUPAR REGISTROS (GROUP BY)



IF OBJECT_ID('VISITANTES') IS NOT NULL

DROP TABLE VISITANTES;



CREATE TABLE VISITANTES(

NOMBRE VARCHAR(30),

EDAD TINYINT,

SEXO CHAR(1) DEFAULT 'F',

DOMICILIO VARCHAR(30),

CIUDAD VARCHAR(20) DEFAULT 'CORDOBA',

TELEFONO VARCHAR(11),

MAIL VARCHAR(30) DEFAULT 'NO TIENE',

MONTOCOMPRA DECIMAL (6,2)

);



INSERT INTO VISITANTES

VALUES ('SUSANA MOLINA',35,DEFAULT,'COLON 123',DEFAULT,NULL,NULL,59.80);

INSERT INTO VISITANTES

VALUES ('MARCOS TORRES',29,'M',DEFAULT,'CARLOS PAZ',DEFAULT,'MARCOSTORRES@HOTMAIL.COM',150.50);

INSERT INTO VISITANTES

VALUES ('MARIANA JUAREZ',45,DEFAULT,DEFAULT,'CARLOS PAZ',NULL,DEFAULT,23.90);

INSERT INTO VISITANTES (NOMBRE, EDAD,SEXO,TELEFONO, MAIL)

VALUES ('FABIAN PEREZ',36,'M','4556677','FABIANPEREZ@XAXAMAIL.COM');

INSERT INTO VISITANTES (NOMBRE, CIUDAD, MONTOCOMPRA)

VALUES ('ALEJANDRA GONZALEZ','LA FALDA',280.50);

INSERT INTO VISITANTES (NOMBRE, EDAD,SEXO, CIUDAD, MAIL,MONTOCOMPRA)

VALUES ('GASTON PEREZ',29,'M','CARLOS PAZ','GASTONPEREZ1@GMAIL.COM',95.40);

INSERT INTO VISITANTES

VALUES ('LILIANA TORRES',40,DEFAULT,'SARMIENTO 876',DEFAULT,DEFAULT,DEFAULT,85);

INSERT INTO VISITANTES

VALUES ('GABRIELA DUARTE',21,NULL,NULL,'RIO TERCERO',DEFAULT,'GABRIELALTORRES@HOTMAIL.COM',321.50);



SELECT CIUDAD, COUNT(*)

FROM VISITANTES

GROUP BY CIUDAD;



SELECT CIUDAD, COUNT(TELEFONO)

FROM VISITANTES

GROUP BY CIUDAD;



SELECT SEXO, SUM(MONTOCOMPRA)

FROM VISITANTES

GROUP BY SEXO;



SELECT SEXO,CIUDAD,

MAX(MONTOCOMPRA) AS MAYOR,

MIN(MONTOCOMPRA) AS MENOR

FROM VISITANTES

GROUP BY SEXO,CIUDAD;



SELECT CIUDAD,

AVG(MONTOCOMPRA) AS 'PROMEDIO DE COMPRAS'

FROM VISITANTES

GROUP BY CIUDAD;



SELECT CIUDAD,

COUNT(*) AS 'CANTIDAD CON MAIL'

FROM VISITANTES

WHERE MAIL IS NOT NULL AND

MAIL<>'NO TIENE'

GROUP BY CIUDAD;



SELECT CIUDAD,

COUNT(*) AS 'CANTIDAD CON MAIL'

FROM VISITANTES

WHERE MAIL IS NOT NULL AND

MAIL<>'NO TIENE'

GROUP BY ALL CIUDAD;





--38- SELECCIONAR GRUPOS (HAVING)



IF OBJECT_ID('CLIENTES') IS NOT NULL

DROP TABLE CLIENTES;



CREATE TABLE CLIENTES (

CODIGO INT IDENTITY,

NOMBRE VARCHAR(30) NOT NULL,

DOMICILIO VARCHAR(30),

CIUDAD VARCHAR(20),

PROVINCIA VARCHAR (20),

TELEFONO VARCHAR(11),

PRIMARY KEY(CODIGO)

);



INSERT INTO CLIENTES

VALUES ('LOPEZ MARCOS','COLON 111','CORDOBA','CORDOBA','NULL');

INSERT INTO CLIENTES

VALUES ('PEREZ ANA','SAN MARTIN 222','CRUZ DEL EJE','CORDOBA','4578585');

INSERT INTO CLIENTES

VALUES ('GARCIA JUAN','RIVADAVIA 333','VILLA DEL ROSARIO','CORDOBA','4578445');

INSERT INTO CLIENTES

VALUES ('PEREZ LUIS','SARMIENTO 444','ROSARIO','SANTA FE',NULL);

INSERT INTO CLIENTES

VALUES ('PEREYRA LUCAS','SAN MARTIN 555','CRUZ DEL EJE','CORDOBA','4253685');

INSERT INTO CLIENTES

VALUES ('GOMEZ INES','SAN MARTIN 666','SANTA FE','SANTA FE','0345252525');

INSERT INTO CLIENTES

VALUES ('TORRES FABIOLA','ALEM 777','VILLA DEL ROSARIO','CORDOBA','4554455');

INSERT INTO CLIENTES

VALUES ('LOPEZ CARLOS',NULL,'CRUZ DEL EJE','CORDOBA',NULL);

INSERT INTO CLIENTES

VALUES ('RAMOS BETINA','SAN MARTIN 999','CORDOBA','CORDOBA','4223366');

INSERT INTO CLIENTES

VALUES ('LOPEZ LUCAS','SAN MARTIN 1010','POSADAS','MISIONES','0457858745');



SELECT CIUDAD, PROVINCIA,

COUNT(*) AS CANTIDAD

FROM CLIENTES

GROUP BY CIUDAD,PROVINCIA;



SELECT CIUDAD, PROVINCIA,

COUNT(*) AS CANTIDAD

FROM CLIENTES

GROUP BY CIUDAD,PROVINCIA

HAVING COUNT(*)>1;



SELECT CIUDAD, COUNT(*)

FROM CLIENTES

WHERE DOMICILIO LIKE '%SAN MARTIN%'

GROUP BY ALL CIUDAD

HAVING COUNT(*)<2 AND

CIUDAD <> 'CORDOBA';


--39- REGISTROS DUPLICADOS (DISTINCT)



IF OBJECT_ID('CLIENTES') IS NOT NULL

DROP TABLE CLIENTES;



CREATE TABLE CLIENTES (

CODIGO INT IDENTITY,

NOMBRE VARCHAR(30) NOT NULL,

DOMICILIO VARCHAR(30),

CIUDAD VARCHAR(20),

PROVINCIA VARCHAR (20),

PRIMARY KEY(CODIGO)

);



INSERT INTO CLIENTES

VALUES ('LOPEZ MARCOS','COLON 111','CORDOBA','CORDOBA');

INSERT INTO CLIENTES

VALUES ('PEREZ ANA','SAN MARTIN 222','CRUZ DEL EJE','CORDOBA');

INSERT INTO CLIENTES

VALUES ('GARCIA JUAN','RIVADAVIA 333','VILLA DEL ROSARIO','CORDOBA');

INSERT INTO CLIENTES

VALUES ('PEREZ LUIS','SARMIENTO 444','ROSARIO','SANTA FE');

INSERT INTO CLIENTES

VALUES ('PEREYRA LUCAS','SAN MARTIN 555','CRUZ DEL EJE','CORDOBA');

INSERT INTO CLIENTES

VALUES ('GOMEZ INES','SAN MARTIN 666','SANTA FE','SANTA FE');

INSERT INTO CLIENTES

VALUES ('TORRES FABIOLA','ALEM 777','VILLA DEL ROSARIO','CORDOBA');

INSERT INTO CLIENTES

VALUES ('LOPEZ CARLOS',NULL,'CRUZ DEL EJE','CORDOBA');

INSERT INTO CLIENTES

VALUES ('RAMOS BETINA','SAN MARTIN 999','CORDOBA','CORDOBA');

INSERT INTO CLIENTES

VALUES ('LOPEZ LUCAS','SAN MARTIN 1010','POSADAS','MISIONES');



SELECT DISTINCT PROVINCIA FROM CLIENTES;



SELECT COUNT(DISTINCT PROVINCIA) AS CANTIDAD

FROM CLIENTES;



SELECT DISTINCT CIUDAD FROM CLIENTES;



SELECT COUNT(DISTINCT CIUDAD) FROM CLIENTES;



SELECT DISTINCT CIUDAD FROM CLIENTES

WHERE PROVINCIA='CORDOBA';



SELECT PROVINCIA,COUNT(DISTINCT CIUDAD)

FROM CLIENTES

GROUP BY PROVINCIA;





--38- CLÁUSULA TOP



IF OBJECT_ID('EMPLEADOS') IS NOT NULL

DROP TABLE EMPLEADOS;



CREATE TABLE EMPLEADOS (

DOCUMENTO VARCHAR(8) NOT NULL,

NOMBRE VARCHAR(30),

ESTADOCIVIL CHAR(1),--C=CASADO, S=SOLTERO,V=VIUDO

SECCION VARCHAR(20)

);



INSERT INTO EMPLEADOS

VALUES ('22222222','ALBERTO LOPEZ','C','SISTEMAS');

INSERT INTO EMPLEADOS

VALUES ('23333333','BEATRIZ GARCIA','C','ADMINISTRACION');

INSERT INTO EMPLEADOS

VALUES ('24444444','CARLOS FUENTES','S','ADMINISTRACION');

INSERT INTO EMPLEADOS

VALUES ('25555555','DANIEL GARCIA','S','SISTEMAS');

INSERT INTO EMPLEADOS

VALUES ('26666666','ESTER JUAREZ','C','SISTEMAS');

INSERT INTO EMPLEADOS

VALUES ('27777777','FABIAN TORRES','S','SISTEMAS');

INSERT INTO EMPLEADOS

VALUES ('28888888','GABRIELA LOPEZ',NULL,'SISTEMAS');

INSERT INTO EMPLEADOS

VALUES ('29999999','HECTOR GARCIA',NULL,'ADMINISTRACION');



SELECT TOP 5 *FROM EMPLEADOS;



SELECT TOP 4 NOMBRE,SECCION

FROM EMPLEADOS

ORDER BY SECCION;



SELECT TOP 4 WITH TIES NOMBRE,SECCION

FROM EMPLEADOS

ORDER BY SECCION;



SELECT TOP 4 NOMBRE,ESTADOCIVIL,SECCION

FROM EMPLEADOS

ORDER BY ESTADOCIVIL,SECCION;



SELECT TOP 4 WITH TIES NOMBRE,ESTADOCIVIL,SECCION

FROM EMPLEADOS

ORDER BY ESTADOCIVIL,SECCION;


--40- ELIMINAR RESTRICCIONES (ALTER TABLE - DROP)



IF OBJECT_ID('LIBROS') IS NOT NULL

DROP TABLE LIBROS;



CREATE TABLE LIBROS(

CODIGO INT NOT NULL,

TITULO VARCHAR(40),

AUTOR VARCHAR(30),

EDITORIAL VARCHAR(15),

PRECIO DECIMAL(6,2)

);



ALTER TABLE LIBROS

ADD CONSTRAINT PK_LIBROS_CODIGO

PRIMARY KEY(CODIGO);



ALTER TABLE LIBROS

ADD CONSTRAINT CK_LIBROS_PRECIO

CHECK (PRECIO>=0);



ALTER TABLE LIBROS

ADD CONSTRAINT DF_LIBROS_AUTOR

DEFAULT 'DESCONOCIDO'

FOR AUTOR;



ALTER TABLE LIBROS

ADD CONSTRAINT DF_LIBROS_PRECIO

DEFAULT 0

FOR PRECIO;



EXEC SP_HELPCONSTRAINT LIBROS;



ALTER TABLE LIBROS

DROP DF_LIBROS_AUTOR;



ALTER TABLE LIBROS

DROP PK_LIBROS_CODIGO;



EXEC SP_HELPCONSTRAINT LIBROS;





--41- TRABAJAR CON VARIAS TABLAS





--42- COMBINACIÓN INTERNA (INNER JOIN)



IF OBJECT_ID('LIBROS') IS NOT NULL

DROP TABLE LIBROS;

IF OBJECT_ID('EDITORIALES') IS NOT NULL

DROP TABLE EDITORIALES;



CREATE TABLE LIBROS(

CODIGO INT IDENTITY,

TITULO VARCHAR(40),

AUTOR VARCHAR(30) DEFAULT 'DESCONOCIDO',

CODIGOEDITORIAL TINYINT NOT NULL,

PRECIO DECIMAL(5,2)

);

CREATE TABLE EDITORIALES(

CODIGO TINYINT IDENTITY,

NOMBRE VARCHAR(20),

PRIMARY KEY (CODIGO)

);



INSERT INTO EDITORIALES VALUES('PLANETA');

INSERT INTO EDITORIALES VALUES('EMECE');

INSERT INTO EDITORIALES VALUES('SIGLO XXI');



INSERT INTO LIBROS VALUES('EL ALEPH','BORGES',2,20);

INSERT INTO LIBROS VALUES('MARTIN FIERRO','JOSE HERNANDEZ',1,30);

INSERT INTO LIBROS VALUES('APRENDA PHP','MARIO MOLINA',3,50);

INSERT INTO LIBROS VALUES('JAVA EN 10 MINUTOS',DEFAULT,3,45);



SELECT* FROM LIBROS;



SELECT TITULO, AUTOR, NOMBRE

FROM LIBROS

JOIN EDITORIALES

ON CODIGOEDITORIAL=EDITORIALES.CODIGO;



SELECT L.CODIGO,TITULO,AUTOR,NOMBRE,PRECIO

FROM LIBROS AS L

JOIN EDITORIALES AS E

ON CODIGOEDITORIAL=E.CODIGO;



SELECT L.CODIGO,TITULO,AUTOR,NOMBRE,PRECIO

FROM LIBROS AS L

JOIN EDITORIALES AS E

ON CODIGOEDITORIAL=E.CODIGO

WHERE E.NOMBRE='SIGLO XXI';



SELECT TITULO,AUTOR,NOMBRE

FROM LIBROS AS L

JOIN EDITORIALES AS E

ON CODIGOEDITORIAL=E.CODIGO

ORDER BY TITULO;





--43- COMBINACIÓN EXTERNA IZQUIERDA (LEFT JOIN)



IF OBJECT_ID('LIBROS') IS NOT NULL

DROP TABLE LIBROS;

IF OBJECT_ID('EDITORIALES') IS NOT NULL

DROP TABLE EDITORIALES;



CREATE TABLE LIBROS(

CODIGO INT IDENTITY,

TITULO VARCHAR(40),

AUTOR VARCHAR(30) DEFAULT 'DESCONOCIDO',

CODIGOEDITORIAL TINYINT NOT NULL,

PRECIO DECIMAL(5,2)

);

CREATE TABLE EDITORIALES(

CODIGO TINYINT IDENTITY,

NOMBRE VARCHAR(20),

PRIMARY KEY (CODIGO)

);



INSERT INTO EDITORIALES VALUES('PLANETA');

INSERT INTO EDITORIALES VALUES('EMECE');

INSERT INTO EDITORIALES VALUES('SIGLO XXI');



INSERT INTO LIBROS VALUES('EL ALEPH','BORGES',1,20);

INSERT INTO LIBROS VALUES('MARTIN FIERRO','JOSE HERNANDEZ',1,30);

INSERT INTO LIBROS VALUES('APRENDA PHP','MARIO MOLINA',2,50);

INSERT INTO LIBROS VALUES('JAVA EN 10 MINUTOS',DEFAULT,4,45);



SELECT TITULO,NOMBRE

FROM EDITORIALES AS E

LEFT JOIN LIBROS AS L

ON CODIGOEDITORIAL = E.CODIGO;



SELECT TITULO,NOMBRE

FROM LIBROS AS L

LEFT JOIN EDITORIALES AS E

ON CODIGOEDITORIAL = E.CODIGO;



SELECT TITULO,NOMBRE

FROM EDITORIALES AS E

LEFT JOIN LIBROS AS L

ON E.CODIGO=CODIGOEDITORIAL

WHERE CODIGOEDITORIAL IS NOT NULL;



SELECT TITULO,NOMBRE

FROM EDITORIALES AS E

LEFT JOIN LIBROS AS L

ON E.CODIGO=CODIGOEDITORIAL

WHERE CODIGOEDITORIAL IS NULL;





--44- COMBINACIÓN EXTERNA DERECHA (RIGHT JOIN)



IF OBJECT_ID('LIBROS') IS NOT NULL

DROP TABLE LIBROS;

IF OBJECT_ID('EDITORIALES') IS NOT NULL

DROP TABLE EDITORIALES;



CREATE TABLE LIBROS(

CODIGO INT IDENTITY,

TITULO VARCHAR(40),

AUTOR VARCHAR(30) DEFAULT 'DESCONOCIDO',

CODIGOEDITORIAL TINYINT NOT NULL,

PRECIO DECIMAL(5,2)

);

CREATE TABLE EDITORIALES(

CODIGO TINYINT IDENTITY,

NOMBRE VARCHAR(20),

PRIMARY KEY (CODIGO)

);



INSERT INTO EDITORIALES VALUES('PLANETA');

INSERT INTO EDITORIALES VALUES('EMECE');

INSERT INTO EDITORIALES VALUES('SIGLO XXI');



INSERT INTO LIBROS VALUES('EL ALEPH','BORGES',1,20);

INSERT INTO LIBROS VALUES('MARTIN FIERRO','JOSE HERNANDEZ',1,30);

INSERT INTO LIBROS VALUES('APRENDA PHP','MARIO MOLINA',2,50);

INSERT INTO LIBROS VALUES('JAVA EN 10 MINUTOS',DEFAULT,4,45);



SELECT TITULO,NOMBRE

FROM LIBROS AS L

RIGHT JOIN EDITORIALES AS E

ON CODIGOEDITORIAL = E.CODIGO;



SELECT TITULO,NOMBRE

FROM LIBROS AS L

RIGHT JOIN EDITORIALES AS E

ON E.CODIGO=CODIGOEDITORIAL

WHERE CODIGOEDITORIAL IS NOT NULL;



SELECT TITULO,NOMBRE

FROM LIBROS AS L

RIGHT JOIN EDITORIALES AS E

ON E.CODIGO=CODIGOEDITORIAL

WHERE CODIGOEDITORIAL IS NULL;

GO





--45- COMBINACIÓN EXTERNA COMPLETA (FULL JOIN) 



IF OBJECT_ID('LIBROS') IS NOT NULL

DROP TABLE LIBROS;

IF OBJECT_ID('EDITORIALES') IS NOT NULL

DROP TABLE EDITORIALES;



CREATE TABLE LIBROS(

CODIGO INT IDENTITY,

TITULO VARCHAR(40),

AUTOR VARCHAR(30) DEFAULT 'DESCONOCIDO',

CODIGOEDITORIAL TINYINT NOT NULL,

PRECIO DECIMAL(5,2)

);

CREATE TABLE EDITORIALES(

CODIGO TINYINT IDENTITY,

NOMBRE VARCHAR(20),

PRIMARY KEY (CODIGO)

);



INSERT INTO EDITORIALES VALUES('PLANETA');

INSERT INTO EDITORIALES VALUES('EMECE');

INSERT INTO EDITORIALES VALUES('SIGLO XXI');



INSERT INTO LIBROS VALUES('EL ALEPH','BORGES',1,20);

INSERT INTO LIBROS VALUES('MARTIN FIERRO','JOSE HERNANDEZ',1,30);

INSERT INTO LIBROS VALUES('APRENDA PHP','MARIO MOLINA',2,50);

INSERT INTO LIBROS VALUES('JAVA EN 10 MINUTOS',DEFAULT,4,45);



SELECT TITULO,NOMBRE

FROM EDITORIALES AS E

FULL JOIN LIBROS AS L

ON CODIGOEDITORIAL = E.CODIGO;

GO





--46- COMBINACIONES CRUZADAS (CROSS JOIN) 



IF OBJECT_ID('COMIDAS') IS NOT NULL

DROP TABLE COMIDAS;

IF OBJECT_ID('POSTRES') IS NOT NULL

DROP TABLE POSTRES;



CREATE TABLE COMIDAS(

CODIGO TINYINT IDENTITY,

NOMBRE VARCHAR(30),

PRECIO DECIMAL(4,2)

);



CREATE TABLE POSTRES(

CODIGO TINYINT IDENTITY,

NOMBRE VARCHAR(30),

PRECIO DECIMAL(4,2)

);



INSERT INTO COMIDAS VALUES('RAVIOLES',5);

INSERT INTO COMIDAS VALUES('TALLARINES',4);

INSERT INTO COMIDAS VALUES('MILANESA',7);

INSERT INTO COMIDAS VALUES('CUARTO DE POLLO',6);



INSERT INTO POSTRES VALUES('FLAN',2.5);

INSERT INTO POSTRES VALUES('PORCION TORTA',3.5);



SELECT C.NOMBRE AS 'PLATO PRINCIPAL',

P.NOMBRE AS 'POSTRE',

C.PRECIO+P.PRECIO AS 'TOTAL'

FROM COMIDAS AS C

CROSS JOIN POSTRES AS P;

GO





--47- COMBINACIÓN DE MÁS DE DOS TABLAS 



IF OBJECT_ID('LIBROS') IS NOT NULL

DROP TABLE LIBROS;

IF OBJECT_ID('AUTORES') IS NOT NULL

DROP TABLE AUTORES;

IF OBJECT_ID('EDITORIALES') IS NOT NULL

DROP TABLE EDITORIALES;



CREATE TABLE LIBROS(

CODIGO INT IDENTITY,

TITULO VARCHAR(40),

CODIGOAUTOR INT NOT NULL,

CODIGOEDITORIAL TINYINT NOT NULL,

PRECIO DECIMAL(5,2),

PRIMARY KEY(CODIGO)

);



CREATE TABLE AUTORES(

CODIGO INT IDENTITY,

NOMBRE VARCHAR(20),

PRIMARY KEY (CODIGO)

);



CREATE TABLE EDITORIALES(

CODIGO TINYINT IDENTITY,

NOMBRE VARCHAR(20),

PRIMARY KEY (CODIGO)

);



INSERT INTO EDITORIALES VALUES('PLANETA');

INSERT INTO EDITORIALES VALUES('EMECE');

INSERT INTO EDITORIALES VALUES('SIGLO XXI');

INSERT INTO EDITORIALES VALUES('PLAZA');



INSERT INTO AUTORES VALUES ('RICHARD BACH');

INSERT INTO AUTORES VALUES ('BORGES');

INSERT INTO AUTORES VALUES ('JOSE HERNANDEZ');

INSERT INTO AUTORES VALUES ('MARIO MOLINA');

INSERT INTO AUTORES VALUES ('PAENZA');



INSERT INTO LIBROS VALUES('EL ALEPH',2,2,20);

INSERT INTO LIBROS VALUES('MARTIN FIERRO',3,1,30);

INSERT INTO LIBROS VALUES('APRENDA PHP',4,3,50);

INSERT INTO LIBROS VALUES('UNO',1,1,15);

INSERT INTO LIBROS VALUES('JAVA EN 10 MINUTOS',0,3,45);

INSERT INTO LIBROS VALUES('MATEMATICA ESTAS AHI',0,0,15);

INSERT INTO LIBROS VALUES('JAVA DE LA A A LA Z',4,0,50);



SELECT TITULO,A.NOMBRE,E.NOMBRE,PRECIO

FROM AUTORES AS A

JOIN LIBROS AS L

ON CODIGOAUTOR=A.CODIGO

JOIN EDITORIALES AS E

ON CODIGOEDITORIAL=E.CODIGO;



SELECT TITULO,A.NOMBRE,E.NOMBRE,PRECIO

FROM AUTORES AS A

RIGHT JOIN LIBROS AS L

ON CODIGOAUTOR=A.CODIGO

LEFT JOIN EDITORIALES AS E

ON CODIGOEDITORIAL=E.CODIGO

GO





--48- COMBINACIONES CON UPDATE Y DELETE 



IF OBJECT_ID('LIBROS') IS NOT NULL

DROP TABLE LIBROS;

IF OBJECT_ID('EDITORIALES') IS NOT NULL

DROP TABLE EDITORIALES;



CREATE TABLE LIBROS(

CODIGO INT IDENTITY,

TITULO VARCHAR(40),

AUTOR VARCHAR(30) DEFAULT 'DESCONOCIDO',

CODIGOEDITORIAL TINYINT NOT NULL,

PRECIO DECIMAL(5,2)

);

CREATE TABLE EDITORIALES(

CODIGO TINYINT IDENTITY,

NOMBRE VARCHAR(20),

PRIMARY KEY (CODIGO)

);



INSERT INTO EDITORIALES VALUES('PLANETA');

INSERT INTO EDITORIALES VALUES('EMECE');

INSERT INTO EDITORIALES VALUES('SIGLO XXI');



INSERT INTO LIBROS VALUES('EL ALEPH','BORGES',2,20);

INSERT INTO LIBROS VALUES('MARTIN FIERRO','JOSE HERNANDEZ',1,30);

INSERT INTO LIBROS VALUES('APRENDA PHP','MARIO MOLINA',3,50);

INSERT INTO LIBROS VALUES('JAVA EN 10 MINUTOS',DEFAULT,3,45);



UPDATE LIBROS SET PRECIO=PRECIO+(PRECIO*0.1)

FROM LIBROS 

JOIN EDITORIALES AS E

ON CODIGOEDITORIAL=E.CODIGO

WHERE NOMBRE='PLANETA';



SELECT TITULO,AUTOR,E.NOMBRE,PRECIO

FROM LIBROS AS L

JOIN EDITORIALES AS E

ON CODIGOEDITORIAL=E.CODIGO;



DELETE LIBROS

FROM LIBROS

JOIN EDITORIALES

ON CODIGOEDITORIAL = EDITORIALES.CODIGO

WHERE EDITORIALES.NOMBRE='EMECE';



SELECT TITULO,AUTOR,E.NOMBRE,PRECIO

FROM LIBROS AS L

JOIN EDITORIALES AS E

ON CODIGOEDITORIAL=E.CODIGO;

GO





--49- CLAVE FORÁNEA



CREATE TABLE DEPARTAMENTOSS

(

DEP INT NOT NULL, 

DEPARTAMENTO VARCHAR(255), 

PRIMARY KEY (DEP) 

); 



CREATE TABLE PERSONASS 

( 

PER INT NOT NULL, 

NOMBRE VARCHAR(255), 

APELLIDO1 VARCHAR(255), 

DEP INT NOT NULL, 

PRIMARY KEY (PER), 

FOREIGN KEY (DEP) REFERENCES DEPARTAMENTOS(DEP) 

); 

GO





--50- UNIÓN



IF OBJECT_ID('ALUMNOS') IS NOT NULL

DROP TABLE ALUMNOS;

IF OBJECT_ID('PROFESORES') IS NOT NULL

DROP TABLE PROFESORES;



CREATE TABLE PROFESORES(

DOCUMENTO VARCHAR(8) NOT NULL,

NOMBRE VARCHAR (30),

DOMICILIO VARCHAR(30),

PRIMARY KEY(DOCUMENTO)

);

CREATE TABLE ALUMNOS(

DOCUMENTO VARCHAR(8) NOT NULL,

NOMBRE VARCHAR (30),

DOMICILIO VARCHAR(30),

PRIMARY KEY(DOCUMENTO)

);



INSERT INTO ALUMNOS VALUES('30000000','JUAN PEREZ','COLON 123');

INSERT INTO ALUMNOS VALUES('30111111','MARTA MORALES','CASEROS 222');

INSERT INTO ALUMNOS VALUES('30222222','LAURA TORRES','SAN MARTIN 987');

INSERT INTO ALUMNOS VALUES('30333333','MARIANO JUAREZ','AVELLANEDA 34');

INSERT INTO ALUMNOS VALUES('23333333','FEDERICO LOPEZ','COLON 987');

INSERT INTO PROFESORES VALUES('22222222','SUSANA MOLINA','SUCRE 345');

INSERT INTO PROFESORES VALUES('23333333','FEDERICO LOPEZ','COLON 987');



SELECT NOMBRE, DOMICILIO FROM ALUMNOS

UNION

SELECT NOMBRE, DOMICILIO FROM PROFESORES;



SELECT NOMBRE, DOMICILIO FROM ALUMNOS

UNION ALL

SELECT NOMBRE, DOMICILIO FROM PROFESORES;



SELECT NOMBRE, DOMICILIO FROM ALUMNOS

UNION

SELECT NOMBRE, DOMICILIO FROM PROFESORES

ORDER BY DOMICILIO;



SELECT NOMBRE, DOMICILIO, 'ALUMNO' AS CONDICION FROM ALUMNOS

UNION

SELECT NOMBRE, DOMICILIO,'PROFESOR' FROM PROFESORES

ORDER BY CONDICION;

GO





--51- AGREGAR Y ELIMINAR CAMPOS ( ALTER TABLE - ADD - DROP) 



IF OBJECT_ID('LIBROS') IS NOT NULL

DROP TABLE LIBROS;



CREATE TABLE LIBROS(

TITULO VARCHAR(30),

EDITORIAL VARCHAR(15),

EDICION DATETIME,

PRECIO DECIMAL(6,2)

);



INSERT INTO LIBROS (TITULO,EDITORIAL,PRECIO)

VALUES ('EL ALEPH','EMECE',25.50);



ALTER TABLE LIBROS

ADD CANTIDAD TINYINT;



EXEC SP_COLUMNS LIBROS;



ALTER TABLE LIBROS

ADD CODIGO INT IDENTITY;



ALTER TABLE LIBROS

ADD AUTOR VARCHAR(30) NOT NULL;



ALTER TABLE LIBROS

ADD AUTOR VARCHAR(20) NOT NULL DEFAULT 'DESCONOCIDO';



ALTER TABLE LIBROS

DROP COLUMN PRECIO;



EXEC SP_COLUMNS LIBROS;



ALTER TABLE LIBROS

DROP COLUMN AUTOR;



ALTER TABLE LIBROS

DROP COLUMN EDITORIAL,EDICION;

GO





--52- ALTERAR CAMPOS (ALTER TABLE - ALTER) 



IF OBJECT_ID('LIBROS') IS NOT NULL

DROP TABLE LIBROS;



CREATE TABLE LIBROS(

CODIGO INT IDENTITY,

TITULO VARCHAR(30),

AUTOR VARCHAR(30),

EDITORIAL VARCHAR(15),

PRECIO DECIMAL(6,2) NOT NULL DEFAULT 0

);



INSERT INTO LIBROS

VALUES('EL ALEPH','BORGES','PLANETA',20);

INSERT INTO LIBROS

VALUES('JAVA EN 10 MINUTOS',NULL,'SIGLO XXI',30);

INSERT INTO LIBROS

VALUES('UNO','RICHARD BACH','PLANETA',15);

INSERT INTO LIBROS

VALUES('MARTIN FIERRO','JOSE HERNANDEZ',NULL,30);

INSERT INTO LIBROS

VALUES('APRENDA PHP','MARIO MOLINA','EMECE',25);



ALTER TABLE LIBROS

ALTER COLUMN TITULO VARCHAR(40) NOT NULL;



DELETE FROM LIBROS WHERE AUTOR IS NULL;

ALTER TABLE LIBROS

ALTER COLUMN AUTOR VARCHAR(30) NOT NULL;



ALTER TABLE LIBROS

ALTER COLUMN CODIGO SMALLINT;



EXEC SP_COLUMNS LIBROS;



ALTER TABLE LIBROS

ALTER COLUMN PRECIO DECIMAL(6,2) NULL;

GO





--53- CAMPOS CALCULADOS 



IF OBJECT_ID('EMPLEADOS') IS NOT NULL

DROP TABLE EMPLEADOS;



CREATE TABLE EMPLEADOS(

DOCUMENTO CHAR(8),

NOMBRE VARCHAR(10),

DOMICILIO VARCHAR(30),

SUELDOBASICO DECIMAL(6,2),

HIJOS TINYINT NOT NULL DEFAULT 0,

SUELDOTOTAL AS SUELDOBASICO + (HIJOS*100)

);



INSERT INTO EMPLEADOS VALUES('22222222','JUAN PEREZ','COLON 123',300,2);

INSERT INTO EMPLEADOS VALUES('23333333','ANA LOPEZ','SUCRE 234',500,0);



SELECT *FROM EMPLEADOS;



UPDATE EMPLEADOS SET HIJOS=1 WHERE DOCUMENTO='23333333';

SELECT *FROM EMPLEADOS;



SELECT *FROM EMPLEADOS;



ALTER TABLE EMPLEADOS

ADD SALARIOFAMILIAR AS HIJOS*100;



EXEC SP_COLUMNS EMPLEADOS;



SELECT *FROM EMPLEADOS;



--54- SUBCONSULTAS



USE SAKILA

SELECT FIRST_NAME

FROM DBO.ACTOR

WHERE LAST_NAME =

(SELECT LAST_NAME

FROM DBO.ACTOR

WHERE FIRST_NAME= 'PENELOPE' );

GO



SELECT A.ACTOR_ID

FROM DBO.ACTOR AS A

JOIN DBO.ACTOR AS AC

ON (A.LAST_NAME = AC.LAST_NAME)

WHERE AC.FIRST_NAME = 'PENELOPE';

GO





--55- SUBCONSULTAS COMO EXPRESIÓN 



IF OBJECT_ID('LIBROS') IS NOT NULL

DROP TABLE LIBROS;



CREATE TABLE LIBROS(

CODIGO INT IDENTITY,

TITULO VARCHAR(40),

AUTOR VARCHAR(30),

EDITORIAL VARCHAR(20),

PRECIO DECIMAL(5,2)

);



INSERT INTO LIBROS VALUES('ALICIA EN EL PAIS DE LAS MARAVILLAS','LEWIS CARROLL','EMECE',20.00);

INSERT INTO LIBROS VALUES('ALICIA EN EL PAIS DE LAS MARAVILLAS','LEWIS CARROLL','PLAZA',35.00);

INSERT INTO LIBROS VALUES('APRENDA PHP','MARIO MOLINA','SIGLO XXI',40.00);

INSERT INTO LIBROS VALUES('EL ALEPH','BORGES','EMECE',10.00);

INSERT INTO LIBROS VALUES('ILUSIONES','RICHARD BACH','PLANETA',15.00);

INSERT INTO LIBROS VALUES('JAVA EN 10 MINUTOS','MARIO MOLINA','SIGLO XXI',50.00);

INSERT INTO LIBROS VALUES('MARTIN FIERRO','JOSE HERNANDEZ','PLANETA',20.00);

INSERT INTO LIBROS VALUES('MARTIN FIERRO','JOSE HERNANDEZ','EMECE',30.00);

INSERT INTO LIBROS VALUES('UNO','RICHARD BACH','PLANETA',10.00);



SELECT TITULO,PRECIO,

PRECIO-(SELECT MAX(PRECIO) FROM LIBROS) AS DIFERENCIA

FROM LIBROS

WHERE TITULO='UNO';



SELECT TITULO,AUTOR, PRECIO

FROM LIBROS

WHERE PRECIO=

(SELECT MAX(PRECIO) FROM LIBROS);



UPDATE LIBROS SET PRECIO=45

WHERE PRECIO=

(SELECT MAX(PRECIO) FROM LIBROS);



DELETE FROM LIBROS

WHERE PRECIO=

(SELECT MIN(PRECIO) FROM LIBROS);

GO





--56- SUBCONSULTAS CON IN



IF OBJECT_ID('LIBROS') IS NOT NULL

DROP TABLE LIBROS;

IF OBJECT_ID('EDITORIALES') IS NOT NULL

DROP TABLE EDITORIALES;



CREATE TABLE EDITORIALES(

CODIGO TINYINT IDENTITY,

NOMBRE VARCHAR(30),

PRIMARY KEY (CODIGO)

);



CREATE TABLE LIBROS (

CODIGO INT IDENTITY,

TITULO VARCHAR(40),

AUTOR VARCHAR(30),

CODIGOEDITORIAL TINYINT,

PRIMARY KEY(CODIGO),

CONSTRAINT FK_LIBROS_EDITORIAL

FOREIGN KEY (CODIGOEDITORIAL)

REFERENCES EDITORIALES(CODIGO)

ON UPDATE CASCADE,

);



INSERT INTO EDITORIALES VALUES('PLANETA');

INSERT INTO EDITORIALES VALUES('EMECE');

INSERT INTO EDITORIALES VALUES('PAIDOS');

INSERT INTO EDITORIALES VALUES('SIGLO XXI');



INSERT INTO LIBROS VALUES('UNO','RICHARD BACH',1);

INSERT INTO LIBROS VALUES('ILUSIONES','RICHARD BACH',1);

INSERT INTO LIBROS VALUES('APRENDA PHP','MARIO MOLINA',4);

INSERT INTO LIBROS VALUES('EL ALEPH','BORGES',2);

INSERT INTO LIBROS VALUES('PUENTE AL INFINITO','RICHARD BACH',2);



SELECT NOMBRE

FROM EDITORIALES

WHERE CODIGO IN

(SELECT CODIGOEDITORIAL

FROM LIBROS

WHERE AUTOR='RICHARD BACH');



SELECT CODIGOEDITORIAL

FROM LIBROS

WHERE AUTOR='RICHARD BACH';



SELECT DISTINCT NOMBRE

FROM EDITORIALES AS E

JOIN LIBROS

ON CODIGOEDITORIAL=E.CODIGO

WHERE AUTOR='RICHARD BACH';



SELECT NOMBRE

FROM EDITORIALES

WHERE CODIGO NOT IN

(SELECT CODIGOEDITORIAL

FROM LIBROS

WHERE AUTOR='RICHARD BACH');

GO





--57- SUBCONSULTAS ANY - SOME - ALL



IF OBJECT_ID('INSCRIPTOS') IS NOT NULL

DROP TABLE INSCRIPTOS;

IF OBJECT_ID('SOCIOS') IS NOT NULL

DROP TABLE SOCIOS;



CREATE TABLE SOCIOS(

NUMERO INT IDENTITY,

DOCUMENTO CHAR(8),

NOMBRE VARCHAR(30),

DOMICILIO VARCHAR(30),

PRIMARY KEY (NUMERO)

);



CREATE TABLE INSCRIPTOS (

NUMEROSOCIO INT NOT NULL,

DEPORTE VARCHAR(20) NOT NULL,

CUOTAS TINYINT

CONSTRAINT CK_INSCRIPTOS_CUOTAS

CHECK (CUOTAS>=0 AND CUOTAS<=10)

CONSTRAINT DF_INSCRIPTOS_CUOTAS DEFAULT 0,

PRIMARY KEY(NUMEROSOCIO,DEPORTE),

CONSTRAINT FK_INSCRIPTOS_SOCIO

FOREIGN KEY (NUMEROSOCIO)

REFERENCES SOCIOS(NUMERO)

ON UPDATE CASCADE

ON DELETE CASCADE,

);



INSERT INTO SOCIOS VALUES('23333333','ALBERTO PAREDES','COLON 111');

INSERT INTO SOCIOS VALUES('24444444','CARLOS CONTE','SARMIENTO 755');

INSERT INTO SOCIOS VALUES('25555555','FABIAN FUENTES','CASEROS 987');

INSERT INTO SOCIOS VALUES('26666666','HECTOR LOPEZ','SUCRE 344');



INSERT INTO INSCRIPTOS VALUES(1,'TENIS',1);

INSERT INTO INSCRIPTOS VALUES(1,'BASQUET',2);

INSERT INTO INSCRIPTOS VALUES(1,'NATACION',1);

INSERT INTO INSCRIPTOS VALUES(2,'TENIS',9);

INSERT INTO INSCRIPTOS VALUES(2,'NATACION',1);

INSERT INTO INSCRIPTOS VALUES(2,'BASQUET',DEFAULT);

INSERT INTO INSCRIPTOS VALUES(2,'FUTBOL',2);

INSERT INTO INSCRIPTOS VALUES(3,'TENIS',8);

INSERT INTO INSCRIPTOS VALUES(3,'BASQUET',9);

INSERT INTO INSCRIPTOS VALUES(3,'NATACION',0);

INSERT INTO INSCRIPTOS VALUES(4,'BASQUET',10);



SELECT NUMERO,NOMBRE,DEPORTE

FROM SOCIOS AS S

JOIN INSCRIPTOS AS I

ON NUMEROSOCIO=NUMERO;



SELECT NOMBRE

FROM SOCIOS

JOIN INSCRIPTOS AS I

ON NUMERO=NUMEROSOCIO

WHERE DEPORTE='NATACION' AND 

NUMERO= ANY

(SELECT NUMEROSOCIO

FROM INSCRIPTOS AS I

WHERE DEPORTE='TENIS');



SELECT DEPORTE

FROM INSCRIPTOS AS I

WHERE NUMEROSOCIO=1 AND

DEPORTE= ANY

(SELECT DEPORTE

FROM INSCRIPTOS AS I

WHERE NUMEROSOCIO=2);



SELECT I1.DEPORTE

FROM INSCRIPTOS AS I1

JOIN INSCRIPTOS AS I2

ON I1.DEPORTE=I2.DEPORTE

WHERE I1.NUMEROSOCIO=1 AND

I2.NUMEROSOCIO=2;



SELECT DEPORTE

FROM INSCRIPTOS AS I

WHERE NUMEROSOCIO=2 AND

CUOTAS>ANY

(SELECT CUOTAS

FROM INSCRIPTOS

WHERE NUMEROSOCIO=1);



SELECT DEPORTE

FROM INSCRIPTOS AS I

WHERE NUMEROSOCIO=2 AND

CUOTAS>ALL

(SELECT CUOTAS

FROM INSCRIPTOS

WHERE NUMEROSOCIO=1);



DELETE FROM INSCRIPTOS

WHERE NUMEROSOCIO=ANY

(SELECT NUMEROSOCIO 

FROM INSCRIPTOS

WHERE CUOTAS=0);





--58- SUBCONSULTAS CORRELACIONADAS



IF OBJECT_ID('INSCRIPTOS') IS NOT NULL

DROP TABLE INSCRIPTOS;

IF OBJECT_ID('SOCIOS') IS NOT NULL

DROP TABLE SOCIOS;



CREATE TABLE SOCIOS(

NUMERO INT IDENTITY,

DOCUMENTO CHAR(8),

NOMBRE VARCHAR(30),

DOMICILIO VARCHAR(30),

PRIMARY KEY (NUMERO)

);



CREATE TABLE INSCRIPTOS (

NUMEROSOCIO INT NOT NULL,

DEPORTE VARCHAR(20) NOT NULL,

CUOTAS TINYINT

CONSTRAINT CK_INSCRIPTOS_CUOTAS

CHECK (CUOTAS>=0 AND CUOTAS<=10)

CONSTRAINT DF_INSCRIPTOS_CUOTAS DEFAULT 0,

PRIMARY KEY(NUMEROSOCIO,DEPORTE),

CONSTRAINT FK_INSCRIPTOS_SOCIO

FOREIGN KEY (NUMEROSOCIO)

REFERENCES SOCIOS(NUMERO)

ON UPDATE CASCADE

ON DELETE CASCADE,

);



INSERT INTO SOCIOS VALUES('23333333','ALBERTO PAREDES','COLON 111');

INSERT INTO SOCIOS VALUES('24444444','CARLOS CONTE','SARMIENTO 755');

INSERT INTO SOCIOS VALUES('25555555','FABIAN FUENTES','CASEROS 987');

INSERT INTO SOCIOS VALUES('26666666','HECTOR LOPEZ','SUCRE 344');



INSERT INTO INSCRIPTOS VALUES(1,'TENIS',1);

INSERT INTO INSCRIPTOS VALUES(1,'BASQUET',2);

INSERT INTO INSCRIPTOS VALUES(1,'NATACION',1);

INSERT INTO INSCRIPTOS VALUES(2,'TENIS',9);

INSERT INTO INSCRIPTOS VALUES(2,'NATACION',1);

INSERT INTO INSCRIPTOS VALUES(2,'BASQUET',DEFAULT);

INSERT INTO INSCRIPTOS VALUES(2,'FUTBOL',2);

INSERT INTO INSCRIPTOS VALUES(3,'TENIS',8);

INSERT INTO INSCRIPTOS VALUES(3,'BASQUET',9);

INSERT INTO INSCRIPTOS VALUES(3,'NATACION',0);

INSERT INTO INSCRIPTOS VALUES(4,'BASQUET',10);



SELECT NOMBRE,DOMICILIO,

(SELECT COUNT(*)

FROM INSCRIPTOS AS I

WHERE S.NUMERO=I.NUMEROSOCIO) AS 'DEPORTES'

FROM SOCIOS AS S;



SELECT NOMBRE,

(SELECT (COUNT(*)*10)

FROM INSCRIPTOS AS I

WHERE S.NUMERO=I.NUMEROSOCIO) AS TOTAL,

(SELECT SUM(I.CUOTAS)

FROM INSCRIPTOS AS I

WHERE S.NUMERO=I.NUMEROSOCIO) AS PAGAS

FROM SOCIOS AS S;



SELECT NOMBRE,

COUNT(I.DEPORTE)*10 AS TOTAL,

SUM(I.CUOTAS) AS PAGAS

FROM SOCIOS AS S

JOIN INSCRIPTOS AS I

ON NUMERO=NUMEROSOCIO

GROUP BY NOMBRE;





--59- EXISTS Y NO EXISTS



IF OBJECT_ID('DEPORTES') IS NOT NULL

DROP TABLE DEPORTES;



CREATE TABLE DEPORTES(

NOMBRE VARCHAR(15),

PROFESOR VARCHAR(30),

DIA VARCHAR(10),

CUOTA DECIMAL(5,2),

);



INSERT INTO DEPORTES VALUES('TENIS','ANA LOPEZ','LUNES',20);

INSERT INTO DEPORTES VALUES('NATACION','ANA LOPEZ','MARTES',15);

INSERT INTO DEPORTES VALUES('FUTBOL','CARLOS FUENTES','MIERCOLES',10);

INSERT INTO DEPORTES VALUES('BASQUET','GASTON GARCIA','JUEVES',15);

INSERT INTO DEPORTES VALUES('PADLE','JUAN HUERTA','LUNES',15);

INSERT INTO DEPORTES VALUES('HANDBALL','JUAN HUERTA','MARTES',10);



SELECT DISTINCT D1.PROFESOR

FROM DEPORTES AS D1

WHERE D1.PROFESOR IN

(SELECT D2.PROFESOR

FROM DEPORTES AS D2 

WHERE D1.NOMBRE <> D2.NOMBRE);



SELECT DISTINCT D1.PROFESOR

FROM DEPORTES AS D1

JOIN DEPORTES AS D2

ON D1.PROFESOR=D2.PROFESOR

WHERE D1.NOMBRE<>D2.NOMBRE;



SELECT NOMBRE

FROM DEPORTES

WHERE NOMBRE<>'NATACION' AND

DIA =

(SELECT DIA

FROM DEPORTES

WHERE NOMBRE='NATACION');



SELECT D1.NOMBRE

FROM DEPORTES AS D1

JOIN DEPORTES AS D2

ON D1.DIA=D2.DIA

WHERE D2.NOMBRE='NATACION' AND

D1.NOMBRE<>D2.NOMBRE;

	

--60- SUBCONSULTA EN LUGAR DE UNA TABLA



IF OBJECT_ID('INSCRIPTOS') IS NOT NULL

DROP TABLE INSCRIPTOS;

IF OBJECT_ID('SOCIOS') IS NOT NULL

DROP TABLE SOCIOS;

IF OBJECT_ID('DEPORTES') IS NOT NULL

DROP TABLE DEPORTES;



CREATE TABLE SOCIOS(

DOCUMENTO CHAR(8) NOT NULL, 

NOMBRE VARCHAR(30),

DOMICILIO VARCHAR(30),

PRIMARY KEY(DOCUMENTO)

);

CREATE TABLE DEPORTES(

CODIGO TINYINT IDENTITY,

NOMBRE VARCHAR(20),

PROFESOR VARCHAR(15),

PRIMARY KEY(CODIGO)

);

CREATE TABLE INSCRIPTOS(

DOCUMENTO CHAR(8) NOT NULL, 

CODIGODEPORTE TINYINT NOT NULL,

AÑO CHAR(4),

MATRICULA CHAR(1),--'S'=PAGA, 'N'=IMPAGA

PRIMARY KEY(DOCUMENTO,CODIGODEPORTE,AÑO),

CONSTRAINT FK_INSCRIPTOS_SOCIO

FOREIGN KEY (DOCUMENTO)

REFERENCES SOCIOS(DOCUMENTO)

ON UPDATE CASCADE

ON DELETE CASCADE

);



INSERT INTO SOCIOS VALUES('22222222','ANA ACOSTA','AVELLANEDA 111');

INSERT INTO SOCIOS VALUES('23333333','BETINA BUSTOS','BULNES 222');

INSERT INTO SOCIOS VALUES('24444444','CARLOS CASTRO','CASEROS 333');

INSERT INTO SOCIOS VALUES('25555555','DANIEL DUARTE','DINAMARCA 44');



INSERT INTO DEPORTES VALUES('BASQUET','JUAN JUAREZ');

INSERT INTO DEPORTES VALUES('FUTBOL','PEDRO PEREZ');

INSERT INTO DEPORTES VALUES('NATACION','MARINA MORALES');

INSERT INTO DEPORTES VALUES('TENIS','MARINA MORALES');



INSERT INTO INSCRIPTOS VALUES ('22222222',3,'2006','S');

INSERT INTO INSCRIPTOS VALUES ('23333333',3,'2006','S');

INSERT INTO INSCRIPTOS VALUES ('24444444',3,'2006','N');

INSERT INTO INSCRIPTOS VALUES ('22222222',3,'2005','S');

INSERT INTO INSCRIPTOS VALUES ('22222222',3,'2007','N');

INSERT INTO INSCRIPTOS VALUES ('24444444',1,'2006','S');

INSERT INTO INSCRIPTOS VALUES ('24444444',2,'2006','S');



SELECT I.DOCUMENTO,I.CODIGODEPORTE,D.NOMBRE AS DEPORTE, AÑO, MATRICULA, D.PROFESOR

FROM DEPORTES AS D

JOIN INSCRIPTOS AS I

ON D.CODIGO=I.CODIGODEPORTE;



SELECT S.NOMBRE,TD.DEPORTE,TD.PROFESOR,TD.AÑO,TD.MATRICULA

FROM SOCIOS AS S

JOIN (SELECT I.DOCUMENTO,I.CODIGODEPORTE,D.NOMBRE AS DEPORTE, AÑO, MATRICULA, D.PROFESOR

FROM DEPORTES AS D

JOIN INSCRIPTOS AS I

ON D.CODIGO=I.CODIGODEPORTE) AS TD

ON TD.DOCUMENTO=S.DOCUMENTO;





--61- SUBCONSULTA (UPDATE - DELETE)



IF OBJECT_ID('EMPLEADOS') IS NOT NULL

DROP TABLE EMPLEADOS;



CREATE TABLE EMPLEADOS(

DOCUMENTO CHAR(8),

NOMBRE VARCHAR(20),

APELLIDO VARCHAR(20),

SUELDO DECIMAL(6,2),

CANTIDADHIJOS TINYINT,

SECCION VARCHAR(20),

PRIMARY KEY(DOCUMENTO)

);



INSERT INTO EMPLEADOS VALUES('22222222','JUAN','PEREZ',300,2,'CONTADURIA');

INSERT INTO EMPLEADOS VALUES('22333333','LUIS','LOPEZ',300,0,'CONTADURIA');

INSERT INTO EMPLEADOS VALUES ('22444444','MARTA','PEREZ',500,1,'SISTEMAS');

INSERT INTO EMPLEADOS VALUES('22555555','SUSANA','GARCIA',400,2,'SECRETARIA');

INSERT INTO EMPLEADOS VALUES('22666666','JOSE MARIA','MORALES',400,3,'SECRETARIA');



IF OBJECT_ID('PA_EMPLEADOS_SUELDO') IS NOT NULL

DROP PROCEDURE PA_EMPLEADOS_SUELDO;



CREATE PROCEDURE PA_EMPLEADOS_SUELDO

@SUELDO DECIMAL(6,2)

AS

SELECT NOMBRE,APELLIDO,SUELDO

FROM EMPLEADOS

WHERE SUELDO>=@SUELDO;



EXEC PA_EMPLEADOS_SUELDO 400;

EXEC PA_EMPLEADOS_SUELDO 500;



EXEC PA_EMPLEADOS_SUELDO;



IF OBJECT_ID('PA_EMPLEADOS_ACTUALIZAR_SUELDO') IS NOT NULL

DROP PROCEDURE PA_EMPLEADOS_ACTUALIZAR_SUELDO;



CREATE PROCEDURE PA_EMPLEADOS_ACTUALIZAR_SUELDO

@SUELDOANTERIOR DECIMAL(6,2),

@SUELDONUEVO DECIMAL(6,2)

AS

UPDATE EMPLEADOS SET SUELDO=@SUELDONUEVO

WHERE SUELDO=@SUELDOANTERIOR;



EXEC PA_EMPLEADOS_ACTUALIZAR_SUELDO 300,350;

SELECT *FROM EMPLEADOS;



EXEC PA_EMPLEADOS_ACTUALIZAR_SUELDO 350;



EXEC PA_EMPLEADOS_ACTUALIZAR_SUELDO @SUELDONUEVO=400,@SUELDOANTERIOR=350;



SELECT *FROM EMPLEADOS;



IF OBJECT_ID('PA_SUELDOTOTAL') IS NOT NULL

DROP PROCEDURE PA_SUELDOTOTAL;



CREATE PROCEDURE PA_SUELDOTOTAL

@DOCUMENTO VARCHAR(8) = '%'

AS

SELECT NOMBRE,APELLIDO,

SUELDOTOTAL=

CASE 

WHEN SUELDO<500 THEN SUELDO+(CANTIDADHIJOS*200)

WHEN SUELDO>=500 THEN SUELDO+(CANTIDADHIJOS*100)

END

FROM EMPLEADOS

WHERE DOCUMENTO LIKE @DOCUMENTO;



EXEC PA_SUELDOTOTAL '22333333';

EXEC PA_SUELDOTOTAL '22444444';

EXEC PA_SUELDOTOTAL '22666666';



EXEC PA_SUELDOTOTAL;





--62- SUBCONSULTA (INSERT)



IF OBJECT_ID('EMPLEADOS') IS NOT NULL

DROP TABLE EMPLEADOS;



CREATE TABLE EMPLEADOS(

DOCUMENTO CHAR(8),

NOMBRE VARCHAR(20),

APELLIDO VARCHAR(20),

SUELDO DECIMAL(6,2),

CANTIDADHIJOS TINYINT,

SECCION VARCHAR(20),

PRIMARY KEY(DOCUMENTO)

);



INSERT INTO EMPLEADOS VALUES('22222222','JUAN','PEREZ',300,2,'CONTADURIA');

INSERT INTO EMPLEADOS VALUES('22333333','LUIS','LOPEZ',350,0,'CONTADURIA');

INSERT INTO EMPLEADOS VALUES ('22444444','MARTA','PEREZ',500,1,'SISTEMAS');

INSERT INTO EMPLEADOS VALUES('22555555','SUSANA','GARCIA',NULL,2,'SECRETARIA');

INSERT INTO EMPLEADOS VALUES('22666666','JOSE MARIA','MORALES',460,3,'SECRETARIA');

INSERT INTO EMPLEADOS VALUES('22777777','ANDRES','PEREZ',580,3,'SISTEMAS');

INSERT INTO EMPLEADOS VALUES('22888888','LAURA','GARCIA',400,3,'SECRETARIA');



IF OBJECT_ID('PA_SECCION') IS NOT NULL

DROP PROCEDURE PA_SECCION;



CREATE PROCEDURE PA_SECCION

@SECCION VARCHAR(20)='%',

@PROMEDIO DECIMAL(6,2) OUTPUT,

@MAYOR DECIMAL(6,2) OUTPUT

AS

SELECT @PROMEDIO=AVG(SUELDO)

FROM EMPLEADOS

WHERE SECCION LIKE @SECCION

SELECT @MAYOR=MAX(SUELDO)

FROM EMPLEADOS

WHERE SECCION LIKE @SECCION;



DECLARE @P DECIMAL(6,2), @M DECIMAL(6,2)

EXECUTE PA_SECCION 'CONTADURIA', @P OUTPUT, @M OUTPUT

SELECT @P AS PROMEDIO, @M AS MAYOR



EXECUTE PA_SECCION 'SECRETARIA', @P OUTPUT, @M OUTPUT

SELECT @P AS PROMEDIO, @M AS MAYOR;



DECLARE @P DECIMAL(6,2), @M DECIMAL(6,2)

EXECUTE PA_SECCION @PROMEDIO=@P OUTPUT,@MAYOR= @M OUTPUT

SELECT @P AS PROMEDIO, @M AS MAYOR;



IF OBJECT_ID('PA_SUELDOTOTAL') IS NOT NULL

DROP PROCEDURE PA_SUELDOTOTAL;



CREATE PROCEDURE PA_SUELDOTOTAL

@DOCUMENTO VARCHAR(8)='%',

@SUELDOTOTAL DECIMAL(8,2) OUTPUT

AS

SELECT @SUELDOTOTAL=

CASE 

WHEN SUELDO<500 THEN SUELDO+(CANTIDADHIJOS*200)

WHEN SUELDO>=500 THEN SUELDO+(CANTIDADHIJOS*100)

END

FROM EMPLEADOS

WHERE DOCUMENTO LIKE @DOCUMENTO;



DECLARE @ST DECIMAL(8,2)

EXEC PA_SUELDOTOTAL '22666666', @ST OUTPUT

SELECT @ST;



DECLARE @ST DECIMAL(8,2)

EXEC PA_SUELDOTOTAL '22999999', @ST OUTPUT

SELECT @ST;



DECLARE @ST DECIMAL(8,2)

EXEC PA_SUELDOTOTAL '22555555', @ST OUTPUT

SELECT @ST;



DECLARE @ST DECIMAL(8,2)

EXEC PA_SUELDOTOTAL @SUELDOTOTAL=@ST OUTPUT

SELECT @ST;





--63- CREAR TABLA A PARTIR DE OTRA (SELECT - INTO)



IF OBJECT_ID('EMPLEADOS') IS NOT NULL

DROP TABLE EMPLEADOS;



CREATE TABLE EMPLEADOS(

DOCUMENTO CHAR(8),

NOMBRE VARCHAR(20),

APELLIDO VARCHAR(20),

CANTIDADHIJOS TINYINT,

SECCION VARCHAR(20),

PRIMARY KEY(DOCUMENTO)

);



INSERT INTO EMPLEADOS VALUES('22222222','JUAN','PEREZ',2,'CONTADURIA');

INSERT INTO EMPLEADOS VALUES('22333333','LUIS','LOPEZ',0,'CONTADURIA');

INSERT INTO EMPLEADOS VALUES ('22444444','MARTA','PEREZ',NULL,'SISTEMAS');

INSERT INTO EMPLEADOS VALUES('22555555','SUSANA','GARCIA',2,'SECRETARIA');

INSERT INTO EMPLEADOS VALUES('22666666','JOSE MARIA','MORALES',1,'SECRETARIA');

INSERT INTO EMPLEADOS VALUES('22777777','ANDRES','PEREZ',3,'SISTEMAS');

INSERT INTO EMPLEADOS VALUES('22888888','LAURA','GARCIA',3,'SECRETARIA');



IF OBJECT_ID('PA_EMPLEADOS_SECCION') IS NOT NULL

DROP PROCEDURE PA_EMPLEADOS_SECCION;



CREATE PROCEDURE PA_EMPLEADOS_SECCION

@SECCION VARCHAR(20)=NULL

AS 

IF @SECCION IS NULL

BEGIN 

SELECT 'DEBE INDICAR UNA SECCION'

RETURN

END

SELECT NOMBRE FROM EMPLEADOS WHERE SECCION=@SECCION;



EXEC PA_EMPLEADOS_SECCION 'SECRETARIA';



EXEC PA_EMPLEADOS_SECCION;



IF OBJECT_ID('PA_ACTUALIZARHIJOS') IS NOT NULL

DROP PROCEDURE PA_ACTUALIZARHIJOS;



CREATE PROCEDURE PA_ACTUALIZARHIJOS

@DOCUMENTO CHAR(8)=NULL,

@HIJOS TINYINT=NULL

AS 

IF (@DOCUMENTO IS NULL) OR (@HIJOS IS NULL)

RETURN 0

ELSE 

BEGIN

UPDATE EMPLEADOS SET CANTIDADHIJOS=@HIJOS WHERE DOCUMENTO=@DOCUMENTO

RETURN 1

END;



DECLARE @RETORNO INT

EXEC @RETORNO=PA_ACTUALIZARHIJOS '22222222',3

SELECT 'REGISTRO ACTUALIZADO=1' = @RETORNO;



SELECT *FROM EMPLEADOS;



DECLARE @RETORNO INT

EXEC @RETORNO=PA_ACTUALIZARHIJOS '22333333'

SELECT 'REGISTRO ACTUALIZADO=1' = @RETORNO;



SELECT *FROM EMPLEADOS;



DECLARE @RETORNO INT

EXEC @RETORNO=PA_ACTUALIZARHIJOS '22333333',2

IF @RETORNO=1 SELECT 'REGISTRO ACTUALIZADO'

ELSE SELECT 'REGISTRO NO ACTUALIZADO, SE NECESITA UN DOCUMENTO Y LA CANTIDAD DE HIJOS';



SELECT *FROM EMPLEADOS;



DECLARE @RETORNO INT

EXEC @RETORNO=PA_ACTUALIZARHIJOS @HIJOS=4

IF @RETORNO=1 SELECT 'REGISTRO ACTUALIZADO'

ELSE SELECT 'REGISTRO NO ACTUALIZADO, SE NECESITA UN DOCUMENTO Y LA CANTIDAD DE HIJOS';





--64- GO



IF OBJECT_ID('CLIENTES') IS NOT NULL

DROP TABLE CLIENTES;

IF OBJECT_ID('CIUDADES') IS NOT NULL

DROP TABLE CIUDADES;



CREATE TABLE CIUDADES(

CODIGO TINYINT IDENTITY,

NOMBRE VARCHAR(20),

CONSTRAINT PK_CIUDADES

PRIMARY KEY (CODIGO)

);



CREATE TABLE CLIENTES(

NOMBRE VARCHAR(20),

APELLIDO VARCHAR(20),

DOCUMENTO CHAR(8),

DOMICILIO VARCHAR(30),

CODIGOCIUDAD TINYINT

CONSTRAINT FK_CLIENTES_CIUDAD

FOREIGN KEY (CODIGOCIUDAD)

REFERENCES CIUDADES(CODIGO)

ON UPDATE CASCADE

);



INSERT INTO CIUDADES VALUES('CORDOBA');

INSERT INTO CIUDADES VALUES('CARLOS PAZ');

INSERT INTO CIUDADES VALUES('CRUZ DEL EJE');

INSERT INTO CIUDADES VALUES('LA FALDA');



INSERT INTO CLIENTES VALUES('JUAN','PEREZ','22222222','COLON 1123',1);

INSERT INTO CLIENTES VALUES('KARINA','LOPEZ','23333333','SAN MARTIN 254',2);

INSERT INTO CLIENTES VALUES('LUIS','GARCIA','24444444','CASEROS 345',1);

INSERT INTO CLIENTES VALUES('MARCOS','GONZALEZ','25555555','SUCRE 458',3);

INSERT INTO CLIENTES VALUES('NORA','TORRES','26666666','BULNES 567',1);

INSERT INTO CLIENTES VALUES('OSCAR','LUQUE','27777777','SAN MARTIN 786',4);



IF OBJECT_ID('VISTA_CLIENTES') IS NOT NULL

DROP VIEW VISTA_CLIENTES;



CREATE VIEW VISTA_CLIENTES

AS

SELECT APELLIDO, CL.NOMBRE, DOCUMENTO, DOMICILIO, CL.CODIGOCIUDAD,CI.NOMBRE AS CIUDAD

FROM CLIENTES AS CL

JOIN CIUDADES AS CI

ON CODIGOCIUDAD=CODIGO

WHERE CI.NOMBRE='CORDOBA'

WITH CHECK OPTION;



SELECT *FROM VISTA_CLIENTES;



UPDATE VISTA_CLIENTES SET APELLIDO='PEREYRA' WHERE DOCUMENTO='22222222';



SELECT *FROM CLIENTES;



UPDATE VISTA_CLIENTES SET CODIGOCIUDAD=2 WHERE DOCUMENTO='22222222';





--65- VISTAS



IF OBJECT_ID('VISITAS') IS NOT NULL

DROP TABLE VISITAS;



CREATE TABLE VISITAS (

NUMERO INT IDENTITY,

NOMBRE VARCHAR(30),

MAIL VARCHAR(50),

PAIS VARCHAR (20),

FECHA DATETIME

CONSTRAINT DF_VISITAS_FECHA DEFAULT GETDATE(),

COMENTARIOS TEXT,

CONSTRAINT PK_VISITAS

PRIMARY KEY(NUMERO)

);



INSERT INTO VISITAS VALUES ('ANA MARIA LOPEZ','ANAMARIA@HOTMAIL.COM','ARGENTINA','2006-10-10 10:10',NULL);

INSERT INTO VISITAS VALUES ('GUSTAVO GONZALEZ','GUSTAVOGGONZALEZ@HOTMAIL.COM','CHILE','2006-10-10 21:30',DEFAULT);

INSERT INTO VISITAS VALUES ('FABIOLA MARTINEZ','MARTINEZFABIOLA@HOTMAIL.COM','MEXICO',DEFAULT,'EXCELENTE PÁGINA');

INSERT INTO VISITAS VALUES ('MARIANO PEREZ','PEREZM@HOTMAIL.COM','ARGENTINA','2006-11-11 14:30','MUY BUENA Y DIVERTIDA');



DECLARE @PUNTERO VARBINARY(16)

SELECT @PUNTERO=TEXTPTR(COMENTARIOS) 

FROM VISITAS

WHERE NUMERO=3

READTEXT VISITAS.COMENTARIOS @PUNTERO 0 10;



DECLARE @PUNTERO VARBINARY(16)

SELECT @PUNTERO=TEXTPTR(COMENTARIOS) 

FROM VISITAS

WHERE NUMERO=1

READTEXT VISITAS.COMENTARIOS @PUNTERO 0 10;



DECLARE @PUNTERO VARBINARY(16)

SELECT @PUNTERO=TEXTPTR(COMENTARIOS) 

FROM VISITAS WHERE NUMERO=1

IF (TEXTVALID('VISITAS.COMENTARIOS', @PUNTERO)=1)

READTEXT VISITAS.COMENTARIOS @PUNTERO 0 0

ELSE SELECT 'PUNTERO INVALIDO';





--66- VISTAS (INFORMACIÓN)



IF OBJECT_ID('VISITAS') IS NOT NULL

DROP TABLE VISITAS;



CREATE TABLE VISITAS (

NUMERO INT IDENTITY,

NOMBRE VARCHAR(30),

MAIL VARCHAR(50),

PAIS VARCHAR (20),

FECHA DATETIME

CONSTRAINT DF_VISITAS_FECHA DEFAULT GETDATE(),

COMENTARIOS TEXT,

CONSTRAINT PK_VISITAS

PRIMARY KEY(NUMERO)

);



INSERT INTO VISITAS VALUES ('ANA MARIA LOPEZ','ANAMARIA@HOTMAIL.COM','ARGENTINA','2006-10-10 10:10',NULL);

INSERT INTO VISITAS VALUES ('GUSTAVO GONZALEZ','GUSTAVOGGONZALEZ@HOTMAIL.COM','CHILE','2006-10-10 21:30',DEFAULT);

INSERT INTO VISITAS VALUES ('FABIOLA MARTINEZ','MARTINEZFABIOLA@HOTMAIL.COM','MEXICO',DEFAULT,'EXCELENTE PÁGINA');

INSERT INTO VISITAS VALUES ('MARIANO PEREZ','PEREZM@HOTMAIL.COM','ARGENTINA','2006-11-11 14:30','MUY BUENA Y DIVERTIDA');



SELECT *FROM VISITAS;



DECLARE @PUNTERO BINARY(16)

SELECT @PUNTERO = TEXTPTR (COMENTARIOS)

FROM VISITAS

WHERE NUMERO=3



WRITETEXT VISITAS.COMENTARIOS @PUNTERO 'ESTA PÁGINA ES EXCELENTE, NO HAY OTRA MEJOR.';



DECLARE @PUNTERO BINARY(16)

SELECT @PUNTERO = TEXTPTR (COMENTARIOS)

FROM VISITAS

WHERE NUMERO=3



READTEXT VISITAS.COMENTARIOS @PUNTERO 0 0;



DECLARE @PUNTERO VARBINARY(16)

SELECT @PUNTERO=TEXTPTR(COMENTARIOS) 

FROM VISITAS WHERE NUMERO=1



WRITETEXT VISITAS.COMENTARIOS @PUNTERO 'ES UNA MUY BUENA PÁGINA, PERO TIENE ALGUNOS ERRORES.';



DECLARE @PUNTERO VARBINARY(16)

SELECT @PUNTERO=TEXTPTR(COMENTARIOS) 

FROM VISITAS WHERE NUMERO=1

IF (TEXTVALID('VISITAS.COMENTARIOS', @PUNTERO)=1)

WRITETEXT VISITAS.COMENTARIOS @PUNTERO 'ES UNA MUY BUENA PÁGINA, PERO TIENE ALGUNOS ERRORES.'

ELSE SELECT 'PUNTERO INVALIDO, NO SE ACTUALIZÓ EL REGISTRO';



INSERT INTO VISITAS VALUES ('SALVADOR QUIROGA','SALVADOR@HOTMAIL.COM','ARGENTINA','2006-09-09 18:25','');



DECLARE @PUNTERO VARBINARY(16)

SELECT @PUNTERO=TEXTPTR(COMENTARIOS) 

FROM VISITAS WHERE NOMBRE='SALVADOR QUIROGA'

IF (TEXTVALID('VISITAS.COMENTARIOS', @PUNTERO)=1)

WRITETEXT VISITAS.COMENTARIOS @PUNTERO 'ES UNA PÁGINA MÁS QUE INTERESANTE.';



DECLARE @PUNTERO BINARY(16)

SELECT @PUNTERO = TEXTPTR (COMENTARIOS)

FROM VISITAS

WHERE NOMBRE='SALVADOR QUIROGA'



READTEXT VISITAS.COMENTARIOS @PUNTERO 0 0;





--67- LENGUAJE DE CONTROL DE FLUJO (CASE)



IF OBJECT_ID('ALUMNOS') IS NOT NULL

DROP TABLE ALUMNOS;



CREATE TABLE ALUMNOS(

DOCUMENTO CHAR(8),

NOMBRE VARCHAR(40),

NOTA DECIMAL(4,2),

PRIMARY KEY(DOCUMENTO)

);



INSERT INTO ALUMNOS VALUES ('22222222','PEDRO LOPEZ',5);

INSERT INTO ALUMNOS VALUES ('23333333','ANA LOPEZ',4);

INSERT INTO ALUMNOS VALUES ('24444444','MARIA JUAREZ',8);

INSERT INTO ALUMNOS VALUES ('25555555','JUAN GARCIA',5.6);

INSERT INTO ALUMNOS VALUES ('26666666','KARINA TORRES',2);

INSERT INTO ALUMNOS VALUES ('27777777','NORA TORRES',7.5);

INSERT INTO ALUMNOS VALUES ('28888888','MARIANO HERRERO',3.5);



IF OBJECT_ID('APROBADOS') IS NOT NULL

DROP TABLE APROBADOS;



CREATE TABLE APROBADOS(

DOCUMENTO CHAR(8),

NOMBRE VARCHAR(40),

NOTA DECIMAL(4,2)

);



IF OBJECT_ID('DESAPROBADOS') IS NOT NULL

DROP TABLE DESAPROBADOS;



CREATE TABLE DESAPROBADOS(

DOCUMENTO CHAR(8),

NOMBRE VARCHAR(40)

);



IF OBJECT_ID('PA_APROBADOS') IS NOT NULL

DROP PROCEDURE PA_APROBADOS;



CREATE PROC PA_APROBADOS

AS

SELECT *

FROM ALUMNOS

WHERE NOTA>=4;



INSERT INTO APROBADOS EXEC PA_APROBADOS;



SELECT *FROM APROBADOS;



IF OBJECT_ID('PA_DESAPROBADOS') IS NOT NULL

DROP PROCEDURE PA_DESAPROBADOS;



CREATE PROC PA_DESAPROBADOS

AS

SELECT DOCUMENTO,NOMBRE

FROM ALUMNOS

WHERE NOTA<4;



INSERT INTO DESAPROBADOS EXEC PA_DESAPROBADOS;



SELECT *FROM DESAPROBADOS;





--68- LENGUAJE DE CONTROL DE FLUJO (IF)



IF OBJECT_ID('EMPLEADOS') IS NOT NULL

DROP TABLE EMPLEADOS;



CREATE TABLE EMPLEADOS(

DOCUMENTO CHAR(8) NOT NULL,

NOMBRE VARCHAR(30) NOT NULL,

SEXO CHAR(1),

FECHANACIMIENTO DATETIME,

FECHAINGRESO DATETIME,

CANTIDADHIJOS TINYINT,

SUELDO DECIMAL(5,2),

PRIMARY KEY(DOCUMENTO)

);



INSERT INTO EMPLEADOS VALUES ('22333111','JUAN PEREZ','M','1970-05-10','1987-04-05',2,550);

INSERT INTO EMPLEADOS VALUES ('25444444','SUSANA MORALES','F','1975-11-06','1990-04-06',0,650);

INSERT INTO EMPLEADOS VALUES ('20111222','HECTOR PEREYRA','M','1965-03-25','1997-04-12',3,510);

INSERT INTO EMPLEADOS VALUES ('30000222','LUIS LUQUE','M','1980-03-29','1999-11-06',1,700);

INSERT INTO EMPLEADOS VALUES ('20555444','LAURA TORRES','F','1965-12-22','2003-11-06',3,400);

INSERT INTO EMPLEADOS VALUES ('30000234','ALBERTO SOTO','M','1989-10-10','1999-11-06',2,420);

INSERT INTO EMPLEADOS VALUES ('20125478','ANA GOMEZ','F','1976-09-21','1998-11-06',3,350);

INSERT INTO EMPLEADOS VALUES ('24154269','OFELIA GARCIA','F','1974-05-12','1990-11-06',0,390);

INSERT INTO EMPLEADOS VALUES ('30415426','OSCAR TORRES','M','1978-05-02','1997-11-06',1,400);



SELECT SEXO, COUNT(*) AS CANTIDAD, OBSEQUIO=

CASE 

WHEN SEXO='F' THEN 'ROSAS'

ELSE 'CORBATA'

END

FROM EMPLEADOS

WHERE DATEPART(MONTH,FECHANACIMIENTO)=5

GROUP BY SEXO;



SELECT NOMBRE,DATEPART(YEAR,FECHAINGRESO) AS AÑOINGRESO,

DATEPART(YEAR,GETDATE())-DATEPART(YEAR,FECHAINGRESO) AS AÑOSDESERVICIO, PLACA=

CASE (DATEPART(YEAR,GETDATE())-DATEPART(YEAR,FECHAINGRESO)) %10

WHEN 0 THEN 'SI' --SI LA CANTIDAD DE AÑOS ES DIVISIBLE POR 10

ELSE 'NO'

END

FROM EMPLEADOS

WHERE DATEPART(MONTH,FECHAINGRESO)=4;



SELECT NOMBRE,SUELDO,CANTIDADHIJOS,PORHIJO=

CASE 

WHEN SUELDO<=500 THEN 200

ELSE 100

END,

SALARIOFAMILAR=

CASE

WHEN SUELDO<=500 THEN 200*CANTIDADHIJOS

ELSE 100*CANTIDADHIJOS

END,

SUELDOTOTAL=

CASE

WHEN SUELDO<=500 THEN SUELDO+(200*CANTIDADHIJOS)

ELSE SUELDO+(100*CANTIDADHIJOS)

END

FROM EMPLEADOS

ORDER BY SUELDOTOTAL;





--69- PROCEDIMIENTOS ALMACENADOS



IF OBJECT_ID('EMPLEADOS') IS NOT NULL

DROP TABLE EMPLEADOS;



CREATE TABLE EMPLEADOS(

DOCUMENTO CHAR(8) NOT NULL,

NOMBRE VARCHAR(30) NOT NULL,

SEXO CHAR(1),

FECHANACIMIENTO DATETIME,

FECHAINGRESO DATETIME,

CANTIDADHIJOS TINYINT,

SUELDO DECIMAL(5,2),

PRIMARY KEY(DOCUMENTO)

);



INSERT INTO EMPLEADOS VALUES ('22333111','JUAN PEREZ','M','1970-05-10','1987-04-05',2,550);

INSERT INTO EMPLEADOS VALUES ('25444444','SUSANA MORALES','F','1975-11-06','1990-04-06',0,650);

INSERT INTO EMPLEADOS VALUES ('20111222','HECTOR PEREYRA','M','1965-03-25','1997-04-12',3,510);

INSERT INTO EMPLEADOS VALUES ('30000222','LUIS LUQUE','M','1980-03-29','1999-11-06',1,700);

INSERT INTO EMPLEADOS VALUES ('20555444','LAURA TORRES','F','1965-12-22','2003-11-06',3,400);

INSERT INTO EMPLEADOS VALUES ('30000234','ALBERTO SOTO','M','1989-10-10','1999-11-06',2,420);

INSERT INTO EMPLEADOS VALUES ('20125478','ANA GOMEZ','F','1976-09-21','1998-11-06',3,350);

INSERT INTO EMPLEADOS VALUES ('24154269','OFELIA GARCIA','F','1974-05-12','1990-11-06',0,390);

INSERT INTO EMPLEADOS VALUES ('30415426','OSCAR TORRES','M','1978-05-02','1997-11-06',1,400);



SELECT SEXO, COUNT(*) AS CANTIDAD, OBSEQUIO=

CASE 

WHEN SEXO='F' THEN 'ROSAS'

ELSE 'CORBATA'

END

FROM EMPLEADOS

WHERE DATEPART(MONTH,FECHANACIMIENTO)=5

GROUP BY SEXO;



SELECT NOMBRE,DATEPART(YEAR,FECHAINGRESO) AS AÑOINGRESO,

DATEPART(YEAR,GETDATE())-DATEPART(YEAR,FECHAINGRESO) AS AÑOSDESERVICIO, PLACA=

CASE (DATEPART(YEAR,GETDATE())-DATEPART(YEAR,FECHAINGRESO)) %10

WHEN 0 THEN 'SI' --SI LA CANTIDAD DE AÑOS ES DIVISIBLE POR 10

ELSE 'NO'

END

FROM EMPLEADOS

WHERE DATEPART(MONTH,FECHAINGRESO)=4;



SELECT NOMBRE,SUELDO,CANTIDADHIJOS,PORHIJO=

CASE 

WHEN SUELDO<=500 THEN 200

ELSE 100

END,

SALARIOFAMILAR=

CASE

WHEN SUELDO<=500 THEN 200*CANTIDADHIJOS

ELSE 100*CANTIDADHIJOS

END,

SUELDOTOTAL=

CASE

WHEN SUELDO<=500 THEN SUELDO+(200*CANTIDADHIJOS)

ELSE SUELDO+(100*CANTIDADHIJOS)

END

FROM EMPLEADOS

ORDER BY SUELDOTOTAL;





--70- TABLAS TEMPORALES



IF (OBJECT_ID('LIBROS')) IS NOT NULL

DROP TABLE LIBROS;

IF (OBJECT_ID('VENTAS')) IS NOT NULL

DROP TABLE VENTAS;



CREATE TABLE LIBROS(

CODIGO INT IDENTITY,

TITULO VARCHAR(40),

AUTOR VARCHAR(30),

EDITORIAL VARCHAR(20),

PRECIO DECIMAL(6,2),

CANTIDAD INT,

PRIMARY KEY (CODIGO)

);



CREATE TABLE VENTAS(

NUMERO INT IDENTITY,

CODIGO INT NOT NULL,

PRECIOUNITARIO DECIMAL(6,2),

CANTIDAD INT, 

CONSTRAINT PK_VENTAS PRIMARY KEY (NUMERO),

CONSTRAINT FK_VENTAS_CODIGOLIBRO

FOREIGN KEY (CODIGO)

REFERENCES LIBROS(CODIGO)

ON UPDATE CASCADE

);



INSERT INTO LIBROS VALUES('UNO','RICHARD BACH','PLANETA',15,100);

INSERT INTO LIBROS VALUES('ILUSIONES','RICHARD BACH','PLANETA',18,150);

INSERT INTO LIBROS VALUES('EL ALEPH','BORGES','EMECE',25,200);

INSERT INTO LIBROS VALUES('MATEMATICA ESTAS AHI','PAENZA','NUEVO SIGLO',20,300);

INSERT INTO LIBROS VALUES('APRENDA PHP','MARIO MOLINA','NUEVO SIGLO',45,200);



INSERT INTO VENTAS VALUES(1,15,1);

INSERT INTO VENTAS VALUES(2,18,1);

INSERT INTO VENTAS VALUES(3,25,100);

INSERT INTO VENTAS VALUES(1,15,50);



IF (OBJECT_ID('PA_VENTAS')) IS NOT NULL

DROP PROC PA_VENTAS;



CREATE PROCEDURE PA_VENTAS

AS

SELECT V.NUMERO,

(L.TITULO+'-'+L.AUTOR+'-'+L.EDITORIAL) AS LIBRO,

V.PRECIOUNITARIO,

V.CANTIDAD,

(V.PRECIOUNITARIO*V.CANTIDAD) AS TOTAL

FROM VENTAS AS V

JOIN LIBROS AS L

ON V.CODIGO=L.CODIGO;



EXEC PA_VENTAS;



IF (OBJECT_ID('PA_VENDER')) IS NOT NULL

DROP PROC PA_VENDER;



CREATE PROCEDURE PA_VENDER

@CODIGO INT=NULL,

@CANTIDAD INT=1

AS

--VERIFICAMOS QUE EL CÓDIGO EXISTA

IF NOT EXISTS (SELECT *FROM LIBROS WHERE CODIGO=@CODIGO) OR (@CODIGO IS NULL)

SELECT 'INGRESE UN CODIGO DE LIBRO VÁLIDO'

ELSE

BEGIN --VERIFICAMOS QUE HAYA STOCK

DECLARE @DISPONIBLES INT

SELECT @DISPONIBLES= CANTIDAD FROM LIBROS WHERE CODIGO=@CODIGO

IF (@DISPONIBLES<@CANTIDAD)

SELECT 'SOLO HAY '+CAST(@DISPONIBLES AS VARCHAR(10))+' DISPONIBLES'

ELSE

BEGIN

DECLARE @PRECIO DECIMAL(6,2) 

SELECT @PRECIO= PRECIO FROM LIBROS WHERE CODIGO=@CODIGO

INSERT INTO VENTAS VALUES(@CODIGO,@PRECIO,@CANTIDAD)

UPDATE LIBROS SET CANTIDAD=CANTIDAD-@CANTIDAD WHERE @CODIGO=CODIGO

END

END;



EXEC PA_VENDER 1,20;



SELECT *FROM VENTAS;

SELECT *FROM LIBROS;



EXEC PA_VENDER 9;



EXEC PA_VENDER 5,250;





--73- TABLAS TEMPORALES



IF OBJECT_ID('CONSULTAS') IS NOT NULL

DROP TABLE CONSULTAS;

IF OBJECT_ID('MEDICOS') IS NOT NULL

DROP TABLE MEDICOS;



CREATE TABLE MEDICOS (

DOCUMENTO CHAR(8) NOT NULL,

NOMBRE VARCHAR(30),

CONSTRAINT PK_MEDICOS 

PRIMARY KEY CLUSTERED (DOCUMENTO)

);



CREATE TABLE CONSULTAS(

FECHA DATETIME,

MEDICO CHAR(8) NOT NULL,

PACIENTE VARCHAR(30),

CONSTRAINT PK_CONSULTAS

PRIMARY KEY (FECHA,MEDICO),

CONSTRAINT FK_CONSULTAS_MEDICO

FOREIGN KEY (MEDICO)

REFERENCES MEDICOS(DOCUMENTO)

ON UPDATE CASCADE

ON DELETE CASCADE

);



INSERT INTO MEDICOS VALUES('22222222','ALFREDO ACOSTA');

INSERT INTO MEDICOS VALUES('23333333','PEDRO PEREZ');

INSERT INTO MEDICOS VALUES('24444444','MARCELA MORALES');



INSERT INTO CONSULTAS VALUES('2007/03/26 8:00','22222222','JUAN JUAREZ');

INSERT INTO CONSULTAS VALUES('2007/03/26 8:00','23333333','GASTON GOMEZ');

INSERT INTO CONSULTAS VALUES('2007/03/26 8:30','22222222','NORA NORTE');

INSERT INTO CONSULTAS VALUES('2007/03/28 9:00','22222222','JUAN JUAREZ');

INSERT INTO CONSULTAS VALUES('2007/03/29 8:00','24444444','NORA NORTE');

INSERT INTO CONSULTAS VALUES('2007/03/24 8:30','22222222','HECTOR HUERTA'); 

INSERT INTO CONSULTAS VALUES('2007/03/24 9:30','23333333','HECTOR HUERTA');



IF OBJECT_ID('F_NOMBREDIA') IS NOT NULL

DROP FUNCTION F_NOMBREDIA;



CREATE FUNCTION F_NOMBREDIA

(@FECHA VARCHAR(30))

RETURNS VARCHAR(10)

AS

BEGIN

DECLARE @NOMBRE VARCHAR(10)

SET @NOMBRE='FECHA INVÁLIDA' 

IF (ISDATE(@FECHA)=1)

BEGIN

SET @FECHA=CAST(@FECHA AS DATETIME)

SET @NOMBRE=

CASE DATENAME(WEEKDAY,@FECHA)

WHEN 'MONDAY' THEN 'LUNES'

WHEN 'TUESDAY' THEN 'MARTES'

WHEN 'WEDNESDAY' THEN 'MIÉRCOLES'

WHEN 'THURSDAY' THEN 'JUEVES'

WHEN 'FRIDAY' THEN 'VIERNES'

WHEN 'SATURDAY' THEN 'SÁBADO'

WHEN 'SUNDAY' THEN 'DOMINGO'

END--CASE

END--SI ES UNA FECHA VÁLIDA

RETURN @NOMBRE

END;



IF OBJECT_ID('F_HORARIO') IS NOT NULL

DROP FUNCTION F_HORARIO;



CREATE FUNCTION F_HORARIO

(@FECHA VARCHAR(30))

RETURNS VARCHAR(5)

AS

BEGIN

DECLARE @NOMBRE VARCHAR(5)

SET @NOMBRE='FECHA INVÁLIDA' 

IF (ISDATE(@FECHA)=1)

BEGIN

SET @FECHA=CAST(@FECHA AS DATETIME)

SET @NOMBRE=RTRIM(CAST(DATEPART(HOUR,@FECHA) AS CHAR(2)))+':'

SET @NOMBRE=@NOMBRE+RTRIM(CAST(DATEPART(MINUTE,@FECHA) AS CHAR(2)))

END--SI ES UNA FECHA VÁLIDA

RETURN @NOMBRE

END;



IF OBJECT_ID('F_FECHA') IS NOT NULL

DROP FUNCTION F_FECHA;



CREATE FUNCTION F_FECHA

(@FECHA VARCHAR(30))

RETURNS VARCHAR(12)

AS

BEGIN

DECLARE @NOMBRE VARCHAR(12)

SET @NOMBRE='FECHA INVÁLIDA' 

IF (ISDATE(@FECHA)=1)

BEGIN

SET @FECHA=CAST(@FECHA AS DATETIME)

SET @NOMBRE=RTRIM(CAST(DATEPART(DAY,@FECHA) AS CHAR(2)))+'/'

SET @NOMBRE=@NOMBRE+RTRIM(CAST(DATEPART(MONTH,@FECHA) AS CHAR(2)))+'/'

SET @NOMBRE=@NOMBRE+RTRIM(CAST(DATEPART(YEAR,@FECHA) AS CHAR(4)))

END--SI ES UNA FECHA VÁLIDA

RETURN @NOMBRE

END;



SELECT DBO.F_NOMBREDIA(FECHA) AS DIA,

DBO.F_FECHA(FECHA) AS FECHA,

DBO.F_HORARIO(FECHA) AS HORARIO,

PACIENTE

FROM CONSULTAS AS C

JOIN MEDICOS AS M

ON M.DOCUMENTO=C.MEDICO

WHERE M.NOMBRE='ALFREDO ACOSTA';



SELECT FECHA, M.NOMBRE

FROM CONSULTAS AS C

JOIN MEDICOS AS M

ON M.DOCUMENTO=C.MEDICO

WHERE DBO.F_NOMBREDIA(FECHA)='SÁBADO';



DECLARE @VALOR CHAR(30)

SET @VALOR='2007/04/09'

SELECT DBO.F_NOMBREDIA(@VALOR);



--75- FUNCIONES DE TABLA DE VARIAS INSTRUCCIONES



IF OBJECT_ID('EMPLEADOS') IS NOT NULL

DROP TABLE EMPLEADOS;



CREATE TABLE EMPLEADOS(

DOCUMENTO CHAR(8) NOT NULL,

APELLIDO VARCHAR(30) NOT NULL,

NOMBRE VARCHAR(30) NOT NULL,

DOMICILIO VARCHAR(30),

CIUDAD VARCHAR(30),

FECHANACIMIENTO DATETIME,

CONSTRAINT PK_EMPLEADOS

PRIMARY KEY(DOCUMENTO)

);



INSERT INTO EMPLEADOS VALUES('22222222','ACOSTA','ANA','AVELLANEDA 123','CORDOBA','1970/10/10');

INSERT INTO EMPLEADOS VALUES('23333333','BUSTOS','BERNARDO','BULNES 234','CORDOBA','1972/05/15');

INSERT INTO EMPLEADOS VALUES('24444444','CASEROS','CARLOS','COLON 356','CARLOS PAZ','1980/02/25');

INSERT INTO EMPLEADOS VALUES('25555555','FUENTES','FABIOLA','FRAGUEIRO 987','JESUS MARIA','1984/06/12');



IF OBJECT_ID('F_EMPLEADOS') IS NOT NULL

DROP FUNCTION F_EMPLEADOS;



CREATE FUNCTION F_EMPLEADOS

(@OPCION VARCHAR(10)

)

RETURNS @LISTADO TABLE

(DOCUMENTO CHAR(8),

NOMBRE VARCHAR(60),

DOMICILIO VARCHAR(60),

NACIMIENTO VARCHAR(12))

AS 

BEGIN

IF @OPCION NOT IN ('TOTAL','PARCIAL')

SET @OPCION='PARCIAL'

IF @OPCION='TOTAL'

INSERT @LISTADO 

SELECT DOCUMENTO,

(APELLIDO+' '+NOMBRE),

(DOMICILIO+' ('+CIUDAD+')'), 

CAST(FECHANACIMIENTO AS VARCHAR(12))

FROM EMPLEADOS

ELSE

INSERT @LISTADO

SELECT DOCUMENTO,APELLIDO,CIUDAD,CAST(DATEPART(YEAR,FECHANACIMIENTO) AS CHAR(4))

FROM EMPLEADOS

RETURN

END;



SELECT *FROM DBO.F_EMPLEADOS('TOTAL');



SELECT *FROM DBO.F_EMPLEADOS();



SELECT *FROM DBO.F_EMPLEADOS('');



SELECT *FROM DBO.F_EMPLEADOS('PARCIAL')

WHERE DOMICILIO='CORDOBA';





--76- FUNCIONES CON VALORES DE TABLA EN LÍNEA



IF OBJECT_ID('LIBROSS') IS NOT NULL

DROP TABLE LIBROS;



CREATE TABLE LIBROSS(

CODIGO INT IDENTITY,

TITULO VARCHAR(40),

AUTOR VARCHAR(30),

EDITORIAL VARCHAR(20)

);



INSERT INTO LIBROS VALUES('UNO','RICHARD BACH','PLANETA');

INSERT INTO LIBROS VALUES('EL ALEPH','BORGES','EMECE');

INSERT INTO LIBROS VALUES('ILUSIONES','RICHARD BACH','PLANETA');

INSERT INTO LIBROS VALUES('APRENDA PHP','MARIO MOLINA','NUEVO SIGLO');

INSERT INTO LIBROS VALUES('MATEMATICA ESTAS AHI','PAENZA','NUEVO SIGLO');



IF OBJECT_ID('F_LIBROS') IS NOT NULL

DROP FUNCTION F_LIBROS;



CREATE FUNCTION F_LIBROS

(@AUTOR VARCHAR(30)='BORGES')

RETURNS TABLE

AS

RETURN (

SELECT TITULO,EDITORIAL

FROM LIBROS

WHERE AUTOR LIKE '%'+@AUTOR+'%'

);



SELECT *FROM F_LIBROS('BACH');



IF OBJECT_ID('F_LIBROS_AUTOREDITORIAL') IS NOT NULL

DROP FUNCTION F_LIBROS_AUTOREDITORIAL;



CREATE FUNCTION F_LIBROS_AUTOREDITORIAL

(@AUTOR VARCHAR(30)='BORGES',

@EDITORIAL VARCHAR(20)='EMECE')

RETURNS TABLE

AS

RETURN (

SELECT TITULO,AUTOR,EDITORIAL

FROM LIBROS

WHERE AUTOR LIKE '%'+@AUTOR+'%' AND

EDITORIAL LIKE '%'+@EDITORIAL+'%'

);



SELECT *FROM F_LIBROS_AUTOREDITORIAL('','NUEVO SIGLO');



SELECT *FROM F_LIBROS_AUTOREDITORIAL(DEFAULT,DEFAULT);
